<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Teal的博客</title>
  <icon>https://www.gravatar.com/avatar/5dfe88a55980ea92eefcdb244c283918</icon>
  <subtitle>前端码农</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wty90.com/"/>
  <updated>2018-01-18T08:05:29.000Z</updated>
  <id>https://www.wty90.com/</id>
  
  <author>
    <name>Teal</name>
    <email>tywei90@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NodeJS爬虫—&gt;立马理财</title>
    <link href="https://www.wty90.com/2018/01/17/lmlc-spider/"/>
    <id>https://www.wty90.com/2018/01/17/lmlc-spider/</id>
    <published>2018-01-17T02:56:53.000Z</published>
    <updated>2018-01-18T08:05:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实在早之前，就做过<a href="https://www.lmlc.com/" target="_blank" rel="external">立马理财</a>的销售额统计，只不过是用前端js写的，需要在首页的console调试面板里粘贴一段代码执行，<a href="https://github.com/tywei90/selfwork/tree/master/statistics" target="_blank" rel="external">点击这里</a>。主要是通过定时爬取<a href="https://www.lmlc.com/s/web/home/user_buying" target="_blank" rel="external"><code>https://www.lmlc.com/s/web/home/user_buying</code></a>异步接口来获取数据。然后通过一定的排重算法来获取最终的数据。但是这样做有以下缺点：  </p><ol><li>代码只能在浏览器窗口下运行，关闭浏览器或者电脑就失效了</li><li>只能爬取一个页面的数据，不能整合其他页面的数据</li><li>爬取的数据无法存储到本地</li><li>上面的异步接口数据会部分过滤，导致我们的排重算法失效</li></ol><p>由于最近学习了node爬虫相关知识，我们可以在后台自己模拟请求，爬取页面数据。并且我开通了阿里云服务器，可以把代码放到云端跑。这样，1、2、3都可以解决。4是因为之前不知道这个ajax接口是每三分钟更新一次，这样我们可以根据这个来排重，确保数据不会重复。说到爬虫，大家想到的比较多的还是python，确实python有Scrapy等成熟的框架，可以实现很强大的爬取功能。但是node也有自身的优点，凭借强大的异步特性，可以很轻松的实现高效的异步并发请求，节省cpu的开销。其实node爬虫还是比较简单的，下面我们就来分析整个爬虫爬取的流程和最终如何展示数据的。</p><p>欢迎大家star学习交流：<a href="https://lmlc.wty90.com/" target="_blank" rel="external">线上地址</a>&emsp;<a href="https://github.com/tywei90/lmlcSpider_production" target="_blank" rel="external">github地址</a></p><a id="more"></a><h2 id="一、爬虫流程"><a href="#一、爬虫流程" class="headerlink" title="一、爬虫流程"></a>一、爬虫流程</h2><p>我们最终的目标是实现爬取立马理财每日的销售额，并知道卖了哪些产品，每个产品又被哪些用户在什么时间点买的。首先，介绍下爬虫爬取的主要步骤：</p><h3 id="1-结构分析"><a href="#1-结构分析" class="headerlink" title="1. 结构分析"></a>1. 结构分析</h3><p>我们要爬取页面的数据，第一步当然是要先分析清楚页面结构，要爬哪些页面，页面的结构是怎样的，需不需要登录；有没有ajax接口，返回什么样的数据等。</p><h3 id="2-数据抓取"><a href="#2-数据抓取" class="headerlink" title="2. 数据抓取"></a>2. 数据抓取</h3><p>分析清楚要爬取哪些页面和ajax，就要去抓取数据了。如今的网页的数据，大体分为同步页面和ajax接口。同步页面数据的抓取就需要我们先分析网页的结构，python抓取数据一般是通过正则表达式匹配来获取需要的数据；node有一个cheerio的工具，可以将获取的页面内容转换成jquery对象，然后就可以用jquery强大的dom API来获取节点相关数据， 其实大家看源码，这些API本质也就是正则匹配。ajax接口数据一般都是json格式的，处理起来还是比较简单的。</p><h3 id="3-数据存储"><a href="#3-数据存储" class="headerlink" title="3. 数据存储"></a>3. 数据存储</h3><p>抓取的数据后，会做简单的筛选，然后将需要的数据先保存起来，以便后续的分析处理。当然我们可以用MySQL和Mongodb等数据库存储数据。这里，我们为了方便，直接采用文件存储。</p><h3 id="4-数据分析"><a href="#4-数据分析" class="headerlink" title="4. 数据分析"></a>4. 数据分析</h3><p>因为我们最终是要展示数据的，所以我们要将原始的数据按照一定维度去处理分析，然后返回给客户端。这个过程可以在存储的时候去处理，也可以在展示的时候，前端发送请求，后台取出存储的数据再处理。这个看我们要怎么展示数据了。</p><h3 id="5-结果展示"><a href="#5-结果展示" class="headerlink" title="5. 结果展示"></a>5. 结果展示</h3><p>做了这么多工作，一点展示输出都没有，怎么甘心呢？这又回到了我们的老本行，前端展示页面大家应该都很熟悉了。将数据展示出来才更直观，方便我们分析统计。</p><h2 id="二、爬虫常用库介绍"><a href="#二、爬虫常用库介绍" class="headerlink" title="二、爬虫常用库介绍"></a>二、爬虫常用库介绍</h2><h3 id="1-Superagent"><a href="#1-Superagent" class="headerlink" title="1. Superagent"></a>1. <a href="http://visionmedia.github.io/superagent/" target="_blank" rel="external">Superagent</a></h3><p>Superagent是个轻量的的http方面的库，是nodejs里一个非常方便的客户端请求代理模块，当我们需要进行get、post、head等网络请求时，尝试下它吧。</p><h3 id="2-Cheerio"><a href="#2-Cheerio" class="headerlink" title="2. Cheerio"></a>2. <a href="https://github.com/cheeriojs/cheerio" target="_blank" rel="external">Cheerio</a></h3><p>Cheerio大家可以理解成一个 Node.js 版的 jquery，用来从网页中以 css selector 取数据，使用方式跟 jquery 一模一样。</p><h3 id="3-Async"><a href="#3-Async" class="headerlink" title="3. Async"></a>3. <a href="https://github.com/caolan/async" target="_blank" rel="external">Async</a></h3><p>Async是一个流程控制工具包，提供了直接而强大的异步功能mapLimit(arr, limit, iterator, callback)，我们主要用到这个方法，大家可以去看看官网的API。</p><h3 id="4-SortArr"><a href="#4-SortArr" class="headerlink" title="4. SortArr"></a>4. <a href="https://github.com/tywei90/selfwork/tree/master/sortArr" target="_blank" rel="external">SortArr</a></h3><p>SortArr是我自己写的一个数组常用方法的工具。有如下方法：</p><ul><li>delArrByIndex 删除数组指定项(index Array)</li><li>maxObjArr 选出对象数组某个属性值最大的对象组成的数组</li><li>minObjArr 选出对象数组某个属性值最小的对象组成的数组</li><li>multiSortArr 多重条件数组筛选方法</li></ul><h2 id="三、页面结构分析"><a href="#三、页面结构分析" class="headerlink" title="三、页面结构分析"></a>三、页面结构分析</h2><p>先屡一下我们爬取的思路。立马理财线上的产品主要是定期和立马金库(最新上线的光大银行理财产品因为手续比较麻烦，而且起投金额高，基本没人买，这里不统计)。定期我们可以爬取<a href="https://www.lmlc.com/web/product/index.html" target="_blank" rel="external">理财页</a>的ajax接口：<a href="https://www.lmlc.com/web/product/product_list?pageSize=10&amp;pageNo=1&amp;type=0" target="_blank" rel="external"><code>https://www.lmlc.com/web/product/product_list?pageSize=10&amp;pageNo=1&amp;type=0</code></a>。数据如下图所示：</p><p><img src="/assets/img/product.png" alt="理财页ajax接口数据" title="理财页ajax接口数据"></p><p>这里包含了所有线上正在销售的定期产品，ajax数据只有产品本身相关的信息，比如产品id、筹集金额、当前销售额、年化收益率、投资天数等，并没有产品被哪些用户购买的信息。所以我们需要带着id参数去它的产品详情页爬取，比如<a href="https://www.lmlc.com/web/product/product_detail.html?id=201801151830PD84123651" target="_blank" rel="external">立马聚财-12月期HLB01239511</a>。详情页有一栏投资记录，里边包含了我们需要的信息，如下图所示：</p><p><img src="/assets/img/records.png" alt="详情页投资记录" title="详情页投资记录"></p><p>但是，详情页需要我们在登录的状态下才可以查看，这就需要我们带着cookie去访问，而且cookie是有有效期限制的，如何保持我们cookie一直在登录态呢？请看后文。</p><p>其实立马金库也有类似的ajax接口：<a href="https://www.lmlc.com/web/product/product_list?pageSize=10&amp;pageNo=1&amp;type=1" target="_blank" rel="external"><code>https://www.lmlc.com/web/product/product_list?pageSize=10&amp;pageNo=1&amp;type=1</code></a>，但是里边的相关数据都是写死的，没有意义。而且<a href="https://www.lmlc.com/web/page/login/fund/jsFund.html" target="_blank" rel="external">金库的详情页</a>也没有投资记录信息。这就需要我们爬取一开始说的首页的ajax接口：<a href="https://www.lmlc.com/s/web/home/user_buying" target="_blank" rel="external"><code>https://www.lmlc.com/s/web/home/user_buying</code></a>。但是后来才发现这个接口是三分钟更新一次，就是说后台每隔三分钟向服务器请求一次数据。而一次是10条数据，所以如果在三分钟内，购买产品的记录数超过10条，数据就会有遗漏。这是没有办法的，所以立马金库的统计数据会比真实的偏少。</p><h2 id="四、爬虫代码分析"><a href="#四、爬虫代码分析" class="headerlink" title="四、爬虫代码分析"></a>四、爬虫代码分析</h2><h3 id="1-获取登录cookie"><a href="#1-获取登录cookie" class="headerlink" title="1. 获取登录cookie"></a>1. 获取登录cookie</h3><p>因为产品详情页需要登录，所以我们要先拿到登录的cookie才行。getCookie方法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    superagent.post(<span class="string">'https://www.lmlc.com/user/s/web/logon'</span>)</div><div class="line">        .type(<span class="string">'form'</span>)</div><div class="line">        .send(&#123;</div><div class="line">            <span class="attr">phone</span>: phone,</div><div class="line">            <span class="attr">password</span>: password,</div><div class="line">            <span class="attr">productCode</span>: <span class="string">"LMLC"</span>,</div><div class="line">            <span class="attr">origin</span>: <span class="string">"PC"</span></div><div class="line">        &#125;)</div><div class="line">        .end(<span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err) &#123;</div><div class="line">                handleErr(err.message);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            cookie = res.header[<span class="string">'set-cookie'</span>]; <span class="comment">//从response中得到cookie</span></div><div class="line">            emitter.emit(<span class="string">"setCookeie"</span>);</div><div class="line">        &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>phone和password参数是从命令行里传进来的，就是立马理财用手机号登录的账号和密码。我们用superagent去模拟请求立马理财登录接口：<code>https://www.lmlc.com/user/s/web/logon</code>。传入相应的参数，在回调中，我们拿到header的set-cookie信息，并发出一个setCookeie事件。因为我们设置了监听事件：<code>emitter.on(&quot;setCookie&quot;, requestData)</code>，所以一旦获取cookie，我们就会去执行requestData方法。</p><h3 id="2-理财页ajax的爬取"><a href="#2-理财页ajax的爬取" class="headerlink" title="2. 理财页ajax的爬取"></a>2. 理财页ajax的爬取</h3><p>requestData方法的代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    superagent.get(<span class="string">'https://www.lmlc.com/web/product/product_list?pageSize=100&amp;pageNo=1&amp;type=0'</span>)</div><div class="line">    .end(<span class="function"><span class="keyword">function</span>(<span class="params">err,pres</span>)</span>&#123;</div><div class="line">        <span class="comment">// 常规的错误处理</span></div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            handleErr(err.message);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 在这里清空数据，避免一个文件被同时写入</span></div><div class="line">        <span class="keyword">if</span>(clearProd)&#123;</div><div class="line">            fs.writeFileSync(<span class="string">'data/prod.json'</span>, <span class="built_in">JSON</span>.stringify([]));</div><div class="line">            clearProd = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> addData = <span class="built_in">JSON</span>.parse(pres.text).data;</div><div class="line">        <span class="keyword">let</span> formatedAddData = formatData(addData.result);</div><div class="line">        <span class="keyword">let</span> pageUrls = [];</div><div class="line">        <span class="keyword">if</span>(addData.totalPage &gt; <span class="number">1</span>)&#123;</div><div class="line">            handleErr(<span class="string">'产品个数超过100个！'</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,len=addData.result.length; i&lt;len; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(+<span class="keyword">new</span> <span class="built_in">Date</span>() &lt; addData.result[i].buyStartTime)&#123;</div><div class="line">                <span class="keyword">if</span>(preIds.indexOf(addData.result[i].id) == <span class="number">-1</span>)&#123;</div><div class="line">                    preIds.push(addData.result[i].id);</div><div class="line">                    setPreId(addData.result[i].buyStartTime, addData.result[i].id);</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                pageUrls.push(<span class="string">'https://www.lmlc.com/web/product/product_detail.html?id='</span> + addData.result[i].id);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">setPreId</span>(<span class="params">time, id</span>)</span>&#123;</div><div class="line">            cache[id] = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(time - (+<span class="keyword">new</span> <span class="built_in">Date</span>()) &lt; <span class="number">1000</span>)&#123;</div><div class="line">                    <span class="comment">// 预售产品开始抢购，直接修改爬取频次为1s，防止丢失数据</span></div><div class="line">                    clearInterval(cache[id]);</div><div class="line">                    clearInterval(timer);</div><div class="line">                    delay = <span class="number">1000</span>;</div><div class="line">                    timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        requestData();</div><div class="line">                    &#125;, delay);</div><div class="line">                    <span class="comment">// 同时删除id记录</span></div><div class="line">                    <span class="keyword">let</span> index = preIds.indexOf(id);</div><div class="line">                    sort.delArrByIndex(preIds, [index]);</div><div class="line">                &#125;</div><div class="line">            &#125;, <span class="number">1000</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 处理售卖金额信息</span></div><div class="line">        <span class="keyword">let</span> oldData = <span class="built_in">JSON</span>.parse(fs.readFileSync(<span class="string">'data/prod.json'</span>, <span class="string">'utf-8'</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, len=formatedAddData.length; i&lt;len; i++)&#123;</div><div class="line">            <span class="keyword">let</span> isNewProduct = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>, len2=oldData.length; j&lt;len2; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(formatedAddData[i].productId === oldData[j].productId)&#123;</div><div class="line">                    isNewProduct = <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(isNewProduct)&#123;</div><div class="line">                oldData.push(formatedAddData[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        fs.writeFileSync(<span class="string">'data/prod.json'</span>, <span class="built_in">JSON</span>.stringify(oldData));</div><div class="line">        <span class="keyword">let</span> time = (<span class="keyword">new</span> <span class="built_in">Date</span>()).format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">        <span class="built_in">console</span>.log((<span class="string">`理财列表ajax接口爬取完毕，时间：<span class="subst">$&#123;time&#125;</span>`</span>).warn);</div><div class="line">        <span class="keyword">if</span>(!pageUrls.length)&#123;</div><div class="line">            delay = <span class="number">32</span>*<span class="number">1000</span>;</div><div class="line">            clearInterval(timer);</div><div class="line">            timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                requestData();</div><div class="line">            &#125;, delay);</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        getDetailData();</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>代码很长，getDetailData函数代码后面分析。</p><p>请求的ajax接口是个分页接口，因为一般在售的总产品数不会超过10条，我们这里设置参数pageSize为100，这样就可以一次性获取所有产品。</p><p>clearProd是全局reset信号，每天0点整的时候，会清空prod(定期产品)和user(首页用户)数据。</p><p>因为有时候产品较少会采用抢购的方式，比如每天10点，这样在每天10点的时候数据会更新很快，我们必须要增加爬取的频次，以防丢失数据。所以针对预售产品即buyStartTime大于当前时间，我们要记录下，并设定计时器，当开售时，调整爬取频次为1次/秒，见setPreId方法。</p><p>如果没有正在售卖的产品，即pageUrls为空，我们将爬取的频次设置为最大32s。</p><p>requestData函数的这部分代码主要记录下是否有新产品，如果有的话，新建一个对象，记录产品信息，push到prod数组里。prod.json数据结构如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[&#123;</div><div class="line">  <span class="attr">"productName"</span>: <span class="string">"立马聚财-12月期HLB01230901"</span>,</div><div class="line">  <span class="attr">"financeTotalAmount"</span>: <span class="number">1000000</span>,</div><div class="line">  <span class="attr">"productId"</span>: <span class="string">"201801151830PD84123120"</span>,</div><div class="line">  <span class="attr">"yearReturnRate"</span>: <span class="number">6.4</span>,</div><div class="line">  <span class="attr">"investementDays"</span>: <span class="number">364</span>,</div><div class="line">  <span class="attr">"interestStartTime"</span>: <span class="string">"2018年01月23日"</span>,</div><div class="line">  <span class="attr">"interestEndTime"</span>: <span class="string">"2019年01月22日"</span>,</div><div class="line">  <span class="attr">"getDataTime"</span>: <span class="number">1516118401299</span>,</div><div class="line">  <span class="attr">"alreadyBuyAmount"</span>: <span class="number">875000</span>,</div><div class="line">  <span class="attr">"records"</span>: [</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"username"</span>: <span class="string">"刘**"</span>,</div><div class="line">    <span class="attr">"buyTime"</span>: <span class="number">1516117093472</span>,</div><div class="line">    <span class="attr">"buyAmount"</span>: <span class="number">30000</span>,</div><div class="line">    <span class="attr">"uniqueId"</span>: <span class="string">"刘**151611709347230,000元"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"username"</span>: <span class="string">"刘**"</span>,</div><div class="line">    <span class="attr">"buyTime"</span>: <span class="number">1516116780799</span>,</div><div class="line">    <span class="attr">"buyAmount"</span>: <span class="number">50000</span>,</div><div class="line">    <span class="attr">"uniqueId"</span>: <span class="string">"刘**151611678079950,000元"</span></div><div class="line">  &#125;]</div><div class="line">&#125;]</div></pre></td></tr></table></figure></p><p>是一个对象数组，每个对象表示一个新产品，records属性记录着售卖信息。</p><h3 id="3-产品详情页的爬取"><a href="#3-产品详情页的爬取" class="headerlink" title="3. 产品详情页的爬取"></a>3. 产品详情页的爬取</h3><p>我们再看下getDetailData的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDetailData</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 请求用户信息接口，来判断登录是否还有效，在产品详情页判断麻烦还要造成五次登录请求</span></div><div class="line">    superagent</div><div class="line">        .post(<span class="string">'https://www.lmlc.com/s/web/m/user_info'</span>)</div><div class="line">        .set(<span class="string">'Cookie'</span>, cookie)</div><div class="line">        .end(<span class="function"><span class="keyword">function</span>(<span class="params">err,pres</span>)</span>&#123;</div><div class="line">        <span class="comment">// 常规的错误处理</span></div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            handleErr(err.message);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> retcode = <span class="built_in">JSON</span>.parse(pres.text).retcode;</div><div class="line">        <span class="keyword">if</span>(retcode === <span class="number">410</span>)&#123;</div><div class="line">            handleErr(<span class="string">'登陆cookie已失效，尝试重新登陆...'</span>);</div><div class="line">            getCookie();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> reptileLink = <span class="function"><span class="keyword">function</span>(<span class="params">url,callback</span>)</span>&#123;</div><div class="line">            <span class="comment">// 如果爬取页面有限制爬取次数，这里可设置延迟</span></div><div class="line">            <span class="built_in">console</span>.log( <span class="string">'正在爬取产品详情页面：'</span> + url);</div><div class="line">            superagent</div><div class="line">                .get(url)</div><div class="line">                .set(<span class="string">'Cookie'</span>, cookie)</div><div class="line">                .end(<span class="function"><span class="keyword">function</span>(<span class="params">err,pres</span>)</span>&#123;</div><div class="line">                    <span class="comment">// 常规的错误处理</span></div><div class="line">                    <span class="keyword">if</span> (err) &#123;</div><div class="line">                        handleErr(err.message);</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">var</span> $ = cheerio.load(pres.text);</div><div class="line">                    <span class="keyword">var</span> records = [];</div><div class="line">                    <span class="keyword">var</span> $table = $(<span class="string">'.buy-records table'</span>);</div><div class="line">                    <span class="keyword">if</span>(!$table.length)&#123;</div><div class="line">                        $table = $(<span class="string">'.tabcontent table'</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">var</span> $tr = $table.find(<span class="string">'tr'</span>).slice(<span class="number">1</span>);</div><div class="line">                    $tr.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        records.push(&#123;</div><div class="line">                            <span class="attr">username</span>: $(<span class="string">'td'</span>, $(<span class="keyword">this</span>)).eq(<span class="number">0</span>).text(),</div><div class="line">                            <span class="attr">buyTime</span>: <span class="built_in">parseInt</span>($(<span class="string">'td'</span>, $(<span class="keyword">this</span>)).eq(<span class="number">1</span>).attr(<span class="string">'data-time'</span>).replace(<span class="regexp">/,/g</span>, <span class="string">''</span>)),</div><div class="line">                            <span class="attr">buyAmount</span>: <span class="built_in">parseFloat</span>($(<span class="string">'td'</span>, $(<span class="keyword">this</span>)).eq(<span class="number">2</span>).text().replace(<span class="regexp">/,/g</span>, <span class="string">''</span>)),</div><div class="line">                            <span class="attr">uniqueId</span>: $(<span class="string">'td'</span>, $(<span class="keyword">this</span>)).eq(<span class="number">0</span>).text() + $(<span class="string">'td'</span>, $(<span class="keyword">this</span>)).eq(<span class="number">1</span>).attr(<span class="string">'data-time'</span>).replace(<span class="regexp">/,/g</span>, <span class="string">''</span>) + $(<span class="string">'td'</span>, $(<span class="keyword">this</span>)).eq(<span class="number">2</span>).text()</div><div class="line">                        &#125;)</div><div class="line">                    &#125;);</div><div class="line">                    callback(<span class="literal">null</span>, &#123;</div><div class="line">                        <span class="attr">productId</span>: url.split(<span class="string">'?id='</span>)[<span class="number">1</span>],</div><div class="line">                        <span class="attr">records</span>: records</div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">async</span>.mapLimit(pageUrls, <span class="number">10</span> ,<span class="function"><span class="keyword">function</span> (<span class="params">url, callback</span>) </span>&#123;</div><div class="line">          reptileLink(url, callback);</div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err,result</span>) </span>&#123;</div><div class="line">            <span class="keyword">let</span> time = (<span class="keyword">new</span> <span class="built_in">Date</span>()).format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">`所有产品详情页爬取完毕，时间：<span class="subst">$&#123;time&#125;</span>`</span>.info);</div><div class="line">            <span class="keyword">let</span> oldRecord = <span class="built_in">JSON</span>.parse(fs.readFileSync(<span class="string">'data/prod.json'</span>, <span class="string">'utf-8'</span>));</div><div class="line">            <span class="keyword">let</span> counts = [];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,len=result.length; i&lt;len; i++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>,len2=oldRecord.length; j&lt;len2; j++)&#123;</div><div class="line">                    <span class="keyword">if</span>(result[i].productId === oldRecord[j].productId)&#123;</div><div class="line">                        <span class="keyword">let</span> count = <span class="number">0</span>;</div><div class="line">                        <span class="keyword">let</span> newRecords = [];</div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>,len3=result[i].records.length; k&lt;len3; k++)&#123;</div><div class="line">                            <span class="keyword">let</span> isNewRec = <span class="literal">true</span>;</div><div class="line">                            <span class="keyword">for</span>(<span class="keyword">let</span> m=<span class="number">0</span>,len4=oldRecord[j].records.length; m&lt;len4; m++)&#123;</div><div class="line">                                <span class="keyword">if</span>(result[i].records[k].uniqueId === oldRecord[j].records[m].uniqueId)&#123;</div><div class="line">                                    isNewRec = <span class="literal">false</span>;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span>(isNewRec)&#123;</div><div class="line">                                count++;</div><div class="line">                                newRecords.push(result[i].records[k]);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        oldRecord[j].records = oldRecord[j].records.concat(newRecords);</div><div class="line">                        counts.push(count);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">let</span> oldDelay = delay;</div><div class="line">            delay = getNewDelay(delay, counts);</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getNewDelay</span>(<span class="params">delay, counts</span>)</span>&#123;</div><div class="line">                <span class="keyword">let</span> nowDate = (<span class="keyword">new</span> <span class="built_in">Date</span>()).toLocaleDateString();</div><div class="line">                <span class="keyword">let</span> time1 = <span class="built_in">Date</span>.parse(nowDate + <span class="string">' 00:00:00'</span>);</div><div class="line">                <span class="keyword">let</span> time2 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">                <span class="comment">// 根据这次更新情况，来动态设置爬取频次</span></div><div class="line">                <span class="keyword">let</span> maxNum = <span class="built_in">Math</span>.max(...counts);</div><div class="line">                <span class="keyword">if</span>(maxNum &gt;=<span class="number">0</span> &amp;&amp; maxNum &lt;= <span class="number">2</span>)&#123;</div><div class="line">                    delay = delay + <span class="number">1000</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(maxNum &gt;=<span class="number">8</span> &amp;&amp; maxNum &lt;= <span class="number">10</span>)&#123;</div><div class="line">                    delay = delay/<span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 每天0点，prod数据清空，排除这个情况</span></div><div class="line">                <span class="keyword">if</span>(maxNum == <span class="number">10</span> &amp;&amp; (time2 - time1 &gt;= <span class="number">60</span>*<span class="number">1000</span>))&#123;</div><div class="line">                    handleErr(<span class="string">'部分数据可能丢失！'</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(delay &lt;= <span class="number">1000</span>)&#123;</div><div class="line">                    delay = <span class="number">1000</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(delay &gt;= <span class="number">32</span>*<span class="number">1000</span>)&#123;</div><div class="line">                    delay = <span class="number">32</span>*<span class="number">1000</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> delay</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(oldDelay != delay)&#123;</div><div class="line">                clearInterval(timer);</div><div class="line">                timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    requestData();</div><div class="line">                &#125;, delay);</div><div class="line">            &#125;</div><div class="line">            fs.writeFileSync(<span class="string">'data/prod.json'</span>, <span class="built_in">JSON</span>.stringify(oldRecord));</div><div class="line">        &#125;)</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们先去请求用户信息接口，来判断登录是否还有效，因为在产品详情页判断麻烦还要造成五次登录请求。带cookie请求很简单，在post后面set下我们之前得到的cookie即可：<code>.set(&#39;Cookie&#39;, cookie)</code>。如果后台返回的retcode为410表示登录的cookie已失效，需要重新执行getCookie()。这样就能保证爬虫一直在登录状态。</p><p>async的mapLimit方法，会将pageUrls进行并发请求，一次并发量为10。对于每个pageUrl会执行reptileLink方法。等所有的异步执行完毕后，再执行回调函数。回调函数的result参数是每个reptileLink函数返回数据组成的数组。</p><p>reptileLink函数是获取产品详情页的投资记录列表信息，uniqueId是由已知的username、buyTime、buyAmount参数组成的字符串，用来排重的。</p><p>async的回调主要是将最新的投资记录信息写入对应的产品对象里，同时生成了counts数组。counts数组是每个产品这次爬取新增的售卖记录个数组成的数组，和delay一起传入getNewDelay函数。getNewDelay动态调节爬取频次，counts是调节delay的唯一依据。delay过大可能产生数据丢失，过小会增加服务器负担，可能会被管理员封ip。这里设置delay最大值为32，最小值为1。</p><h3 id="4-首页用户ajax爬取"><a href="#4-首页用户ajax爬取" class="headerlink" title="4. 首页用户ajax爬取"></a>4. 首页用户ajax爬取</h3><p>先上代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestData1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    superagent.get(ajaxUrl1)</div><div class="line">    .end(<span class="function"><span class="keyword">function</span>(<span class="params">err,pres</span>)</span>&#123;</div><div class="line">        <span class="comment">// 常规的错误处理</span></div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            handleErr(err.message);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> newData = <span class="built_in">JSON</span>.parse(pres.text).data;</div><div class="line">        <span class="keyword">let</span> formatNewData = formatData1(newData);</div><div class="line">        <span class="comment">// 在这里清空数据，避免一个文件被同时写入</span></div><div class="line">        <span class="keyword">if</span>(clearUser)&#123;</div><div class="line">            fs.writeFileSync(<span class="string">'data/user.json'</span>, <span class="string">''</span>);</div><div class="line">            clearUser = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> data = fs.readFileSync(<span class="string">'data/user.json'</span>, <span class="string">'utf-8'</span>);</div><div class="line">        <span class="keyword">if</span>(!data)&#123;</div><div class="line">            fs.writeFileSync(<span class="string">'data/user.json'</span>, <span class="built_in">JSON</span>.stringify(formatNewData));</div><div class="line">            <span class="keyword">let</span> time = (<span class="keyword">new</span> <span class="built_in">Date</span>()).format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">            <span class="built_in">console</span>.log((<span class="string">`首页用户购买ajax爬取完毕，时间：<span class="subst">$&#123;time&#125;</span>`</span>).silly);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">let</span> oldData = <span class="built_in">JSON</span>.parse(data);</div><div class="line">            <span class="keyword">let</span> addData = [];</div><div class="line">            <span class="comment">// 排重算法，如果uniqueId不一样那肯定是新生成的，否则看时间差如果是0(三分钟内请求多次)或者三分钟则是旧数据</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, len=formatNewData.length; i&lt;len; i++)&#123;</div><div class="line">                <span class="keyword">let</span> matchArr = [];</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> len2=oldData.length, j=<span class="built_in">Math</span>.max(<span class="number">0</span>,len2 - <span class="number">20</span>); j&lt;len2; j++)&#123;</div><div class="line">                    <span class="keyword">if</span>(formatNewData[i].uniqueId === oldData[j].uniqueId)&#123;</div><div class="line">                        matchArr.push(j);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(matchArr.length === <span class="number">0</span>)&#123;</div><div class="line">                    addData.push(formatNewData[i]);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">let</span> isNewBuy = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>, len3=matchArr.length; k&lt;len3; k++)&#123;</div><div class="line">                        <span class="keyword">let</span> delta = formatNewData[i].time - oldData[matchArr[k]].time;</div><div class="line">                        <span class="keyword">if</span>(delta == <span class="number">0</span> || (<span class="built_in">Math</span>.abs(delta - <span class="number">3</span>*<span class="number">60</span>*<span class="number">1000</span>) &lt; <span class="number">1000</span>))&#123;</div><div class="line">                            isNewBuy = <span class="literal">false</span>;</div><div class="line">                            <span class="comment">// 更新时间，这样下一次判断还是三分钟</span></div><div class="line">                            oldData[matchArr[k]].time = formatNewData[i].time;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(isNewBuy)&#123;</div><div class="line">                        addData.push(formatNewData[i]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            fs.writeFileSync(<span class="string">'data/user.json'</span>, <span class="built_in">JSON</span>.stringify(oldData.concat(addData)));</div><div class="line">            <span class="keyword">let</span> time = (<span class="keyword">new</span> <span class="built_in">Date</span>()).format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">            <span class="built_in">console</span>.log((<span class="string">`首页用户购买ajax爬取完毕，时间：<span class="subst">$&#123;time&#125;</span>`</span>).silly);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>user.js的爬取和prod.js类似，这里主要想说一下如何排重的。user.json数据格式如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">&#123;</div><div class="line">  <span class="attr">"payAmount"</span>: <span class="number">5067.31</span>,</div><div class="line">  <span class="attr">"productId"</span>: <span class="string">"jsfund"</span>,</div><div class="line">  <span class="attr">"productName"</span>: <span class="string">"立马金库"</span>,</div><div class="line">  <span class="attr">"productType"</span>: <span class="number">6</span>,</div><div class="line">  <span class="attr">"time"</span>: <span class="number">1548489</span>,</div><div class="line">  <span class="attr">"username"</span>: <span class="string">"郑**"</span>,</div><div class="line">  <span class="attr">"buyTime"</span>: <span class="number">1516118397758</span>,</div><div class="line">  <span class="attr">"uniqueId"</span>: <span class="string">"5067.31jsfund郑**"</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">"payAmount"</span>: <span class="number">30000</span>,</div><div class="line">  <span class="attr">"productId"</span>: <span class="string">"201801151830PD84123120"</span>,</div><div class="line">  <span class="attr">"productName"</span>: <span class="string">"立马聚财-12月期HLB01230901"</span>,</div><div class="line">  <span class="attr">"productType"</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">"time"</span>: <span class="number">1306573</span>,</div><div class="line">  <span class="attr">"username"</span>: <span class="string">"刘**"</span>,</div><div class="line">  <span class="attr">"buyTime"</span>: <span class="number">1516117199684</span>,</div><div class="line">  <span class="attr">"uniqueId"</span>: <span class="string">"30000201801151830PD84123120刘**"</span></div><div class="line">&#125;]</div></pre></td></tr></table></figure></p><p>和产品详情页类似，我们也生成一个uniqueId参数用来排除，它是payAmount、productId、username参数的拼成的字符串。如果uniqueId不一样，那肯定是一条新的记录。如果相同那一定是一条新记录吗？答案是否定的。因为这个接口数据是三分钟更新一次，而且给出的时间是相对时间，即数据更新时的时间减去购买的时间。所以每次更新后，即使是同一条记录，时间也会不一样。那如何排重呢？其实很简单，如果uniqueId一样，我们就判断这个buyTime，如果buyTime的差正好接近180s，那么几乎可以肯定是旧数据。如果同一个人正好在三分钟后购买同一个产品相同的金额那我也没辙了，哈哈。</p><h3 id="5-零点整合数据"><a href="#5-零点整合数据" class="headerlink" title="5. 零点整合数据"></a>5. 零点整合数据</h3><p>每天零点我们需要整理user.json和prod.json数据，生成最终的数据。代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> globalTimer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    <span class="keyword">let</span> nowStr = (<span class="keyword">new</span> <span class="built_in">Date</span>()).format(<span class="string">"hh:mm:ss"</span>);</div><div class="line">    <span class="keyword">let</span> max = nowTime;</div><div class="line">    <span class="keyword">let</span> min = nowTime - <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>;</div><div class="line">    <span class="comment">// 每天00:00分的时候写入当天的数据</span></div><div class="line">    <span class="keyword">if</span>(nowStr === <span class="string">"00:00:00"</span>)&#123;</div><div class="line">        <span class="comment">// 先保存数据</span></div><div class="line">        <span class="keyword">let</span> prod = <span class="built_in">JSON</span>.parse(fs.readFileSync(<span class="string">'data/prod.json'</span>, <span class="string">'utf-8'</span>));</div><div class="line">        <span class="keyword">let</span> user = <span class="built_in">JSON</span>.parse(fs.readFileSync(<span class="string">'data/user.json'</span>, <span class="string">'utf-8'</span>));</div><div class="line">        <span class="keyword">let</span> lmlc = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(prod));</div><div class="line">        <span class="comment">// 清空缓存数据</span></div><div class="line">        clearProd = <span class="literal">true</span>;</div><div class="line">        clearUser = <span class="literal">true</span>;</div><div class="line">        <span class="comment">// 不足一天的不统计</span></div><div class="line">        <span class="comment">// if(nowTime - initialTime &lt; 24*60*60*1000) return</span></div><div class="line">        <span class="comment">// 筛选prod.records数据</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, len=prod.length; i&lt;len; i++)&#123;</div><div class="line">            <span class="keyword">let</span> delArr1 = [];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>, len2=prod[i].records.length; j&lt;len2; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(prod[i].records[j].buyTime &lt; min || prod[i].records[j].buyTime &gt;= max)&#123;</div><div class="line">                    delArr1.push(j);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            sort.delArrByIndex(lmlc[i].records, delArr1);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 删掉prod.records为空的数据</span></div><div class="line">        <span class="keyword">let</span> delArr2 = [];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, len=lmlc.length; i&lt;len; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(!lmlc[i].records.length)&#123;</div><div class="line">                delArr2.push(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort.delArrByIndex(lmlc, delArr2);</div><div class="line"></div><div class="line">        <span class="comment">// 初始化lmlc里的立马金库数据</span></div><div class="line">        lmlc.unshift(&#123;</div><div class="line">            <span class="string">"productName"</span>: <span class="string">"立马金库"</span>,</div><div class="line">            <span class="string">"financeTotalAmount"</span>: <span class="number">100000000</span>,</div><div class="line">            <span class="string">"productId"</span>: <span class="string">"jsfund"</span>,</div><div class="line">            <span class="string">"yearReturnRate"</span>: <span class="number">4.0</span>,</div><div class="line">            <span class="string">"investementDays"</span>: <span class="number">1</span>,</div><div class="line">            <span class="string">"interestStartTime"</span>: (<span class="keyword">new</span> <span class="built_in">Date</span>(min)).format(<span class="string">"yyyy年MM月dd日"</span>),</div><div class="line">            <span class="string">"interestEndTime"</span>: (<span class="keyword">new</span> <span class="built_in">Date</span>(max)).format(<span class="string">"yyyy年MM月dd日"</span>),</div><div class="line">            <span class="string">"getDataTime"</span>: min,</div><div class="line">            <span class="string">"alreadyBuyAmount"</span>: <span class="number">0</span>,</div><div class="line">            <span class="string">"records"</span>: []</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 筛选user数据</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, len=user.length; i&lt;len; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(user[i].productId === <span class="string">"jsfund"</span> &amp;&amp; user[i].buyTime &gt;= min &amp;&amp; user[i].buyTime &lt; max)&#123;</div><div class="line">                lmlc[<span class="number">0</span>].records.push(&#123;</div><div class="line">                    <span class="string">"username"</span>: user[i].username,</div><div class="line">                    <span class="string">"buyTime"</span>: user[i].buyTime,</div><div class="line">                    <span class="string">"buyAmount"</span>: user[i].payAmount,</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 删除无用属性，按照时间排序</span></div><div class="line">        lmlc[<span class="number">0</span>].records.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a.buyTime - b.buyTime&#125;);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>, len=lmlc.length; i&lt;len; i++)&#123;</div><div class="line">            lmlc[i].records.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a.buyTime - b.buyTime&#125;);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>, len2=lmlc[i].records.length; j&lt;len2; j++)&#123;</div><div class="line">                <span class="keyword">delete</span> lmlc[i].records[j].uniqueId</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 爬取金库收益，写入前一天的数据，清空user.json和prod.json</span></div><div class="line">        <span class="keyword">let</span> dateStr = (<span class="keyword">new</span> <span class="built_in">Date</span>(nowTime - <span class="number">10</span>*<span class="number">60</span>*<span class="number">1000</span>)).format(<span class="string">"yyyyMMdd"</span>);</div><div class="line">        superagent</div><div class="line">            .get(<span class="string">'https://www.lmlc.com/web/product/product_list?pageSize=10&amp;pageNo=1&amp;type=1'</span>)</div><div class="line">            .end(<span class="function"><span class="keyword">function</span>(<span class="params">err,pres</span>)</span>&#123;</div><div class="line">                <span class="comment">// 常规的错误处理</span></div><div class="line">                <span class="keyword">if</span> (err) &#123;</div><div class="line">                    handleErr(err.message);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(pres.text).data;</div><div class="line">                <span class="keyword">var</span> rate = data.result[<span class="number">0</span>].yearReturnRate||<span class="number">4.0</span>;</div><div class="line">                lmlc[<span class="number">0</span>].yearReturnRate = rate;</div><div class="line">                fs.writeFileSync(<span class="string">`data/<span class="subst">$&#123;dateStr&#125;</span>.json`</span>, <span class="built_in">JSON</span>.stringify(lmlc));</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="number">1000</span>);</div></pre></td></tr></table></figure></p><p>globalTimer是个全局定时器，每隔1s执行一次，当时间为<code>00:00:00</code>时，clearProd和clearUser全局参数为<code>true</code>，这样在下次爬取过程时会清空user.json和prod.json文件。没有同步清空是因为防止多处同时修改同一文件报错。取出user.json里的所有金库记录，获取当天金库相关信息，生成一条立马金库的prod信息并unshift进prod.json里。删除一些无用属性，排序数组最终生成带有当天时间戳的json文件，如：20180101.json。</p><h2 id="五、前端展示"><a href="#五、前端展示" class="headerlink" title="五、前端展示"></a>五、前端展示</h2><h3 id="1、整体思路"><a href="#1、整体思路" class="headerlink" title="1、整体思路"></a>1、整体思路</h3><p>前端总共就两个页面，首页和详情页，首页主要展示实时销售额、某一时间段内的销售情况、具体某天的销售情况。详情页展示某天的具体某一产品销售情况。页面有两个入口，而且比较简单，这里我们采用gulp来打包压缩构建前端工程。后台用express搭建的，匹配到路由，从data文件夹里取到数据再分析处理再返回给前端。</p><h3 id="2、前端用到的组件介绍"><a href="#2、前端用到的组件介绍" class="headerlink" title="2、前端用到的组件介绍"></a>2、前端用到的组件介绍</h3><ul><li><p><a href="http://echarts.baidu.com/" target="_blank" rel="external">Echarts</a><br>Echarts是一个绘图利器，百度公司不可多得的良心之作。能方便的绘制各种图形，官网已经更新到4.0了，功能更加强大。我们这里主要用到的是<a href="http://echarts.baidu.com/examples/editor.html?c=bar-tick-align" target="_blank" rel="external">直方图</a>。</p></li><li><p><a href="https://datatables.net/" target="_blank" rel="external">DataTables</a><br>Datatables是一款jquery表格插件。它是一个高度灵活的工具，可以将任何HTML表格添加高级的交互功能。功能非常强大，有丰富的API，大家可以去官网学习。</p></li><li><p><a href="https://fengyuanchen.github.io/datepicker/" target="_blank" rel="external">Datepicker</a><br>Datepicker是一款基于jquery的日期选择器，需要的功能基本都有，主要样式比较好看，比jqueryUI官网的<a href="https://jqueryui.com/datepicker/" target="_blank" rel="external">Datepicker</a>好看太多。</p></li></ul><h3 id="3、gulp配置"><a href="#3、gulp配置" class="headerlink" title="3、gulp配置"></a>3、gulp配置</h3><p>gulp配置比较简单，代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</div><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">"gulp-less"</span>);</div><div class="line"><span class="keyword">var</span> minifyCss = <span class="built_in">require</span>(<span class="string">"gulp-minify-css"</span>);</div><div class="line"><span class="keyword">var</span> livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>);</div><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">'gulp-connect'</span>);</div><div class="line"><span class="keyword">var</span> minimist = <span class="built_in">require</span>(<span class="string">'minimist'</span>);</div><div class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> knownOptions = &#123;</div><div class="line">  <span class="attr">string</span>: <span class="string">'env'</span>,</div><div class="line">  <span class="attr">default</span>: &#123; <span class="attr">env</span>: process.env.NODE_ENV || <span class="string">'production'</span> &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> options = minimist(process.argv.slice(<span class="number">2</span>), knownOptions);</div><div class="line"></div><div class="line"><span class="comment">// js文件压缩</span></div><div class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/js/*.js'</span>)</div><div class="line">        .pipe(babel(&#123;</div><div class="line">          <span class="attr">presets</span>: [<span class="string">'es2015'</span>]</div><div class="line">        &#125;))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// js移动文件</span></div><div class="line">gulp.task(<span class="string">'move-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/js/*.js'</span>)</div><div class="line">        .pipe(babel(&#123;</div><div class="line">          <span class="attr">presets</span>: [<span class="string">'es2015'</span>]</div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/'</span>))</div><div class="line">        .pipe(connect.reload());</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// less编译</span></div><div class="line">gulp.task(<span class="string">'compile-less'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/css/*.less'</span>)</div><div class="line">        .pipe(less())</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/'</span>))</div><div class="line">        .pipe(connect.reload());</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// less文件编译压缩</span></div><div class="line">gulp.task(<span class="string">'compile-minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/css/*.less'</span>)</div><div class="line">        .pipe(less())</div><div class="line">        .pipe(minifyCss())</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// html页面自动刷新</span></div><div class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src(<span class="string">'views/*.html'</span>)</div><div class="line">    .pipe(connect.reload());</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 页面自动刷新启动</span></div><div class="line">gulp.task(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    connect.server(&#123;</div><div class="line">        <span class="attr">livereload</span>: <span class="literal">true</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 监测文件的改动</span></div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/css/*.less'</span>, [<span class="string">'compile-less'</span>]);</div><div class="line">    gulp.watch(<span class="string">'src/js/*.js'</span>, [<span class="string">'move-js'</span>]);</div><div class="line">    gulp.watch(<span class="string">'views/*.html'</span>, [<span class="string">'html'</span>]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 激活浏览器livereload友好提示</span></div><div class="line">gulp.task(<span class="string">'tip'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'\n&lt;----- 请用chrome浏览器打开 http://localhost:5000 页面，并激活livereload插件 -----&gt;\n'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (options.env === <span class="string">'development'</span>) &#123;</div><div class="line">    gulp.task(<span class="string">'default'</span>, [<span class="string">'move-js'</span>, <span class="string">'compile-less'</span>, <span class="string">'connect'</span>, <span class="string">'watch'</span>, <span class="string">'tip'</span>]);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    gulp.task(<span class="string">'default'</span>, [<span class="string">'minify-js'</span>, <span class="string">'compile-minify-css'</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>开发和生产环境都是将文件打包到dist目录。不同的是：开发环境只是编译es6和less文件；生产环境会再压缩混淆。支持livereload插件，在开发环境下，文件改动会自动刷新页面。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>至此，一个完整的爬虫就完成了。其实我觉得最需要花时间的是在分析页面结构，处理数据还有解决各种问题，比如如何保持一直在登录状态等。</p><p>本爬虫代码只做研究学习用处，禁止用作任何商业分析。再说，统计的数据也不准确。</p><p>因为代码开源，希望大家照着代码去爬取其他网站，如果都拿立马理财来爬，估计服务器会承受不了的额。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实在早之前，就做过&lt;a href=&quot;https://www.lmlc.com/&quot;&gt;立马理财&lt;/a&gt;的销售额统计，只不过是用前端js写的，需要在首页的console调试面板里粘贴一段代码执行，&lt;a href=&quot;https://github.com/tywei90/selfwork/tree/master/statistics&quot;&gt;点击这里&lt;/a&gt;。主要是通过定时爬取&lt;a href=&quot;https://www.lmlc.com/s/web/home/user_buying&quot;&gt;&lt;code&gt;https://www.lmlc.com/s/web/home/user_buying&lt;/code&gt;&lt;/a&gt;异步接口来获取数据。然后通过一定的排重算法来获取最终的数据。但是这样做有以下缺点：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码只能在浏览器窗口下运行，关闭浏览器或者电脑就失效了&lt;/li&gt;
&lt;li&gt;只能爬取一个页面的数据，不能整合其他页面的数据&lt;/li&gt;
&lt;li&gt;爬取的数据无法存储到本地&lt;/li&gt;
&lt;li&gt;上面的异步接口数据会部分过滤，导致我们的排重算法失效&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于最近学习了node爬虫相关知识，我们可以在后台自己模拟请求，爬取页面数据。并且我开通了阿里云服务器，可以把代码放到云端跑。这样，1、2、3都可以解决。4是因为之前不知道这个ajax接口是每三分钟更新一次，这样我们可以根据这个来排重，确保数据不会重复。说到爬虫，大家想到的比较多的还是python，确实python有Scrapy等成熟的框架，可以实现很强大的爬取功能。但是node也有自身的优点，凭借强大的异步特性，可以很轻松的实现高效的异步并发请求，节省cpu的开销。其实node爬虫还是比较简单的，下面我们就来分析整个爬虫爬取的流程和最终如何展示数据的。&lt;/p&gt;
&lt;p&gt;欢迎大家star学习交流：&lt;a href=&quot;https://lmlc.wty90.com/&quot;&gt;线上地址&lt;/a&gt;&amp;emsp;&lt;a href=&quot;https://github.com/tywei90/lmlcSpider_production&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="立马理财" scheme="https://www.wty90.com/tags/%E7%AB%8B%E9%A9%AC%E7%90%86%E8%B4%A2/"/>
    
      <category term="爬虫" scheme="https://www.wty90.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>基于ionic的混合APP实战</title>
    <link href="https://www.wty90.com/2018/01/16/ionic-app/"/>
    <id>https://www.wty90.com/2018/01/16/ionic-app/</id>
    <published>2018-01-16T03:36:54.000Z</published>
    <updated>2018-02-06T13:25:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个项目做得比较早，当时是基于ionic1和angular1做的。做了四个tabs的app，首页模仿携程首页，第二页主要是phonegap调用手机核心功能，第三页模仿微信和qq聊天页，第四页模仿一般手机的表单设置页。同时还模仿知乎做了一个侧边栏页(账号：wty，密码：123456)。</p><p>没有后台，纯前端展示，功能还比较多，调用系统的声音、震动和手机设备信息等。有二维码扫描功能，还做了类似qq消息可拖拽效果，上拉下拉刷新，轮播图组件。</p><p><a href="https://github.com/tywei90/ionic_app_production/releases/download/v1.0/ionic_app.apk" target="_blank" rel="external">安卓apk下载</a>  </p><p><img src="/assets/img/apk.png" alt="安卓apk下载二维码" title="安卓apk下载二维码"></p><p>欢迎大家star学习交流：<a href="https://ionic.wty90.com/" target="_blank" rel="external">线上地址</a>&emsp;<a href="https://github.com/tywei90/ionic_app_production" target="_blank" rel="external">github地址</a></p><a id="more"></a><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h3 id="1-Angularjs简介"><a href="#1-Angularjs简介" class="headerlink" title="1. Angularjs简介"></a>1. Angularjs简介</h3><p>Angularjs是一款优秀的前端 JS 框架，已用于 Google 的多款产品当中 如 Gmail、Maps、Calender 等。AngularJS有着诸多特性，最为核心的是：MVVM、模块化、自动化双向数据绑定、语义标签、依赖注入，等等。</p><h3 id="2-Ionic简介"><a href="#2-Ionic简介" class="headerlink" title="2. Ionic简介"></a>2. Ionic简介</h3><p>Ionic是一个强大的 HTML5 应用程序开发框架，具有速度快，界面现代化、美观等特点。特别适合用于基于 Hybird 模式的 HTML5 移动应用程序开发。</p><h3 id="3-Phonegap简介"><a href="#3-Phonegap简介" class="headerlink" title="3. Phonegap简介"></a>3. Phonegap简介</h3><p>Phonegap是一个用基于 HTML， CSS 和 JavaScript 的，创建移动跨平台移动应用程序的<br>快速开发平台。它使开发者能够手机的核心功能——包括地理定位，加速器，联系人，声音和振动等，此外PhoneGap 拥有丰富的插件，可以调用。</p><h2 id="二、项目各tab主要功能介绍"><a href="#二、项目各tab主要功能介绍" class="headerlink" title="二、项目各tab主要功能介绍"></a>二、项目各tab主要功能介绍</h2><h3 id="1-初始化配置"><a href="#1-初始化配置" class="headerlink" title="1. 初始化配置"></a>1. 初始化配置</h3><ul><li>手机上app显示的图标、名称、开机画面</li><li>注入依赖</li><li>隐藏显示键盘</li><li>hammer触屏手势插件配置</li><li>菜单栏的位置、导航条文字位置、回退按钮图标等</li><li>切换页面的过渡效果（bug）</li><li>AngularUI Router</li><li>services服务</li></ul><h3 id="2-tab-home"><a href="#2-tab-home" class="headerlink" title="2. tab-home"></a>2. tab-home</h3><ul><li>幻灯指令 ion-slide-box</li><li>触屏手势切换页面</li><li>栅格系统</li><li>触屏手势touch-bases和hammerjs</li><li>ng-init、ng-click、 ng-src、 ng-repeat指令，双向数据绑定</li><li>打开app内置的浏览器webview方法</li><li>上拉刷新</li></ul><h3 id="3-tab-dash"><a href="#3-tab-dash" class="headerlink" title="3. tab-dash"></a>3. tab-dash</h3><ul><li>phonegap功能的应用：二维码扫描、调用系统弹窗、震动铃声功能、获取设备信息</li><li>ion-side-menus侧边栏功能</li><li>ionic 动态组件 $ionicModal弹出登录界面</li><li>ng-show、ng-model 双向数据绑定实现登录验证的实时监控</li><li>ionic 动态组件 $ionicPopup弹出注销界面</li><li>更换头像（访问手机摄像头、图库功能）</li><li>切换主题颜色</li></ul><h3 id="4-tab-chats"><a href="#4-tab-chats" class="headerlink" title="4. tab-chats"></a>4. tab-chats</h3><ul><li>删除按钮和重新排序按钮</li><li>下拉刷新</li><li>滑动显示分享编辑按钮</li><li>长按显示动态组件$ionicActionSheet选项</li><li>红色消息badge</li></ul><h3 id="5-tab-account"><a href="#5-tab-account" class="headerlink" title="5. tab-account"></a>5. tab-account</h3><ul><li>ionic的表单应用</li><li>“声音”选项被选中播放铃声</li><li>“震动”选项被选中开始震动</li><li>实现全选、全不选、反选的功能</li><li>ionic动态组件$ionicPopup</li><li>根据被选择数显示相应弹窗内容</li></ul><h2 id="三、演示如下："><a href="#三、演示如下：" class="headerlink" title="三、演示如下："></a>三、演示如下：</h2><p><img src="/assets/img/ionic_app.gif" alt="ionic实战动态图演示">  </p><h2 id="四、总-结"><a href="#四、总-结" class="headerlink" title="四、总 结"></a>四、总 结</h2><p>优点： 通过使用 web 技术开发 App，采用 Cordova/PhoneGap之类进行打包封装。优点是采用标准的web技术开发，避免了不同平台原生开发体系的学习，学习成本低， 上手快、 效率高，一次开发微信 wap app 全部搞定；</p><p>缺点：app 在 android 平台性能上有一些损失， 但是相信硬件的发展会接近原生。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="http://bbs.phonegap100.com/thread-668-1-1.html" target="_blank" rel="external">PhoneGap3.4安装视频教程下载</a></li><li><a href="http://www.angularjs.org/" target="_blank" rel="external">Angular1官网</a></li><li><a href="http://www.angularjs.cn/" target="_blank" rel="external">Angular中文社区</a></li><li><a href="http://www.ngnice.com/" target="_blank" rel="external">AngularJS Nice Things</a></li><li><a href="http://www.phonegap100.com" target="_blank" rel="external">phonegap 中文网</a></li><li><a href="http://ionicframework.com/" target="_blank" rel="external">ionic官网</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个项目做得比较早，当时是基于ionic1和angular1做的。做了四个tabs的app，首页模仿携程首页，第二页主要是phonegap调用手机核心功能，第三页模仿微信和qq聊天页，第四页模仿一般手机的表单设置页。同时还模仿知乎做了一个侧边栏页(账号：wty，密码：123456)。&lt;/p&gt;
&lt;p&gt;没有后台，纯前端展示，功能还比较多，调用系统的声音、震动和手机设备信息等。有二维码扫描功能，还做了类似qq消息可拖拽效果，上拉下拉刷新，轮播图组件。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tywei90/ionic_app_production/releases/download/v1.0/ionic_app.apk&quot;&gt;安卓apk下载&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/apk.png&quot; alt=&quot;安卓apk下载二维码&quot; title=&quot;安卓apk下载二维码&quot;&gt;&lt;/p&gt;
&lt;p&gt;欢迎大家star学习交流：&lt;a href=&quot;https://ionic.wty90.com/&quot;&gt;线上地址&lt;/a&gt;&amp;emsp;&lt;a href=&quot;https://github.com/tywei90/ionic_app_production&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ionic" scheme="https://www.wty90.com/tags/ionic/"/>
    
      <category term="phonegap" scheme="https://www.wty90.com/tags/phonegap/"/>
    
      <category term="混合APP" scheme="https://www.wty90.com/tags/%E6%B7%B7%E5%90%88APP/"/>
    
  </entry>
  
  <entry>
    <title>前端页面制作工具</title>
    <link href="https://www.wty90.com/2018/01/11/pagemaker/"/>
    <id>https://www.wty90.com/2018/01/11/pagemaker/</id>
    <published>2018-01-11T12:50:29.000Z</published>
    <updated>2018-01-25T08:10:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>pagemaker是一个前端页面制作工具，方便产品，运营和视觉的同学迅速开发简单的前端页面，从而可以解放前端同学的工作量。此项目创意来自网易乐得内部项目<a href="http://nfop.ms.netease.com/" target="_blank" rel="external">nfop</a>中的pagemaker项目。原来项目的前端是采用jquery和模板ejs做的，每次组件的更新都会重绘整个dom，性能不是很好。因为当时react特别火，加上项目本身的适合，最后决定采用react来试试水。因为原来整个项目是包含很多子项目一起，所以后台的实现也没有参考，完全重写。  </p><p>本项目只是原来项目的简单实现，去除了用的不多和复杂的组件。但麻雀虽小五脏俱全，本项目采用了react的一整套技术栈，适合那些对react有过前期学习，想通过demo来加深理解并动手实践的同学。建议学习本demo的之前，先学习/复习下相关的知识点：<a href="http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html" target="_blank" rel="external">React 技术栈系列教程</a>、<a href="https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender" target="_blank" rel="external">Immutable 详解及 React 中实践</a>。</p><p>欢迎大家star学习交流：<a href="https://pagemaker.wty90.com/" target="_blank" rel="external">线上地址</a>&emsp;<a href="https://github.com/tywei90/pagemaker_production" target="_blank" rel="external">github地址</a></p><a id="more"></a><h2 id="一、功能特点"><a href="#一、功能特点" class="headerlink" title="一、功能特点"></a>一、功能特点</h2><ol><li>组件丰富。有标题、图片、按钮、正文、音频、视频、统计、jscss输入。</li><li>实时预览。每次修改都可以立马看到最新的预览。</li><li>支持三种导入方式，支持导出配置文件。</li><li>支持Undo/Redo操作。(组件个数发生变化为触发点)</li><li>可以随时发布、修改、删除已发布的页面。</li><li>每个页面都有一个发布密码，从而可以防止别人修改。</li><li>页面前端架构采用react+redux，并采用immutable数据结构。可以将每次组件的更新最小化，从而达到页面性能的最优化。</li><li>后台对上传的图片自动进行压缩，防止文件过大</li><li>适配移动端 </li></ol><h2 id="二、用到的技术"><a href="#二、用到的技术" class="headerlink" title="二、用到的技术"></a>二、用到的技术</h2><h3 id="1-前端"><a href="#1-前端" class="headerlink" title="1. 前端"></a>1. 前端</h3><ol><li>React</li><li>Redux</li><li>React-Redux</li><li>Immutable</li><li>React-Router</li><li>fetch</li><li>es6</li><li>es7</li></ol><h3 id="2-后台"><a href="#2-后台" class="headerlink" title="2. 后台"></a>2. 后台</h3><ol><li>Node</li><li>Express</li></ol><h3 id="3-工具"><a href="#3-工具" class="headerlink" title="3. 工具"></a>3. 工具</h3><ol><li>Webpack</li><li>Sass</li><li>Pug</li></ol><h2 id="三、脚手架工具"><a href="#三、脚手架工具" class="headerlink" title="三、脚手架工具"></a>三、脚手架工具</h2><p>因为项目用的技术比较多，采用脚手架工具可以省去我们搭建项目的时间。经过搜索，我发现有三个用的比较多：</p><ol><li><a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">create-react-app</a>   <img src="/assets/img/git1.png" alt="create-react-app star数" title="create-react-app star数"></li><li><a href="https://github.com/kriasoft/react-starter-kit#readme" target="_blank" rel="external">react-starter-kit</a>   <img src="/assets/img/git2.png" alt="react-starter-kit star数" title="react-starter-kit star数"></li><li><a href="https://github.com/react-boilerplate/react-boilerplate" target="_blank" rel="external">react-boilerplate</a>   <img src="/assets/img/git3.png" alt="react-boilerplate star数" title="react-boilerplate star数">  </li></ol><p>github上的star数都很高，第一个是Facebook官方出的react demo。但是看下来，三个项目都比较庞大，引入了很多不需要的功能包。后来搜索了下，发现一个好用的脚手架工具：<a href="http://yeoman.io/learning/" target="_blank" rel="external">yeoman</a>，大家可以选择相应的generator。我选择的是<a href="https://github.com/react-webpack-generators/generator-react-webpack#readme" target="_blank" rel="external">react-webpack</a>。项目比较清爽，需要大家自己搭建redux和immutable环境，以及后台express。其实也好，锻炼下自己构建项目的能力。</p><h2 id="四、核心代码分析"><a href="#四、核心代码分析" class="headerlink" title="四、核心代码分析"></a>四、核心代码分析</h2><h3 id="1-Store"><a href="#1-Store" class="headerlink" title="1. Store"></a>1. Store</h3><p>Store 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux-immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> unit <span class="keyword">from</span> <span class="string">'./reducer/unit'</span>;</div><div class="line"><span class="comment">// import content from './reducer/content';</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> devToolsEnhancer = <span class="literal">null</span>;</div><div class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</div><div class="line">    devToolsEnhancer = <span class="built_in">require</span>(<span class="string">'remote-redux-devtools'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> reducers = combineReducers(&#123; unit &#125;);</div><div class="line"><span class="keyword">let</span> store = <span class="literal">null</span>;</div><div class="line"><span class="keyword">if</span> (devToolsEnhancer) &#123;</div><div class="line">    store = createStore(reducers, devToolsEnhancer.default(&#123; <span class="attr">realtime</span>: <span class="literal">true</span>, <span class="attr">port</span>: config.reduxDevPort &#125;));</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    store = createStore(reducers);</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</div></pre></td></tr></table></figure></p><p>Redux 提供createStore这个函数，用来生成 Store。由于整个应用只有一个 State 对象，包含所有数据，对于大型应用来说，这个 State 必然十分庞大，导致 Reducer 函数也十分庞大。Redux 提供了一个 combineReducers 方法，用于 Reducer 的拆分。你只要定义各个子 Reducer 函数，然后用这个方法，将它们合成一个大的 Reducer。当然，我们这里只有一个 unit 的 Reducer ，拆不拆分都可以。  </p><p>devToolsEnhancer是个中间件（middleware）。用于在开发环境时使用Redux DevTools来调试redux。</p><h3 id="2-Action"><a href="#2-Action" class="headerlink" title="2. Action"></a>2. Action</h3><p>Action 描述当前发生的事情。改变 State 的唯一办法，就是使用 Action。它会运送数据到 Store。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Store <span class="keyword">from</span> <span class="string">'../store'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> dispatch = Store.dispatch;</div><div class="line"></div><div class="line"><span class="keyword">const</span> actions = &#123;</div><div class="line">    <span class="attr">addUnit</span>: <span class="function">(<span class="params">name</span>) =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">'AddUnit'</span>, name &#125;),</div><div class="line">    <span class="attr">copyUnit</span>: <span class="function">(<span class="params">id</span>) =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">'CopyUnit'</span>, id &#125;),</div><div class="line">    <span class="attr">editUnit</span>: <span class="function">(<span class="params">id, prop, value</span>) =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">'EditUnit'</span>, id, prop, value &#125;),</div><div class="line">    <span class="attr">removeUnit</span>: <span class="function">(<span class="params">id</span>) =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">'RemoveUnit'</span>, id &#125;),</div><div class="line">    <span class="attr">clear</span>: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">'Clear'</span>&#125;),</div><div class="line">    <span class="attr">insert</span>: <span class="function">(<span class="params">data, index</span>) =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">'Insert'</span>, data, index&#125;),</div><div class="line">    <span class="attr">moveUnit</span>: <span class="function">(<span class="params">fid, tid</span>) =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">'MoveUnit'</span>, fid, tid &#125;),</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> actions;</div></pre></td></tr></table></figure></p><p>State 的变化，会导致 View 的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。代码中，我们定义了actions对象，他有很多属性，每个属性都是函数，函数的输出是派发了一个action对象，通过Store.dispatch发出。action是一个包含了必须的type属性，还有其他附带的信息。</p><h3 id="3-Immutable"><a href="#3-Immutable" class="headerlink" title="3. Immutable"></a>3. Immutable</h3><p>Immutable Data 就是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象。详细介绍，推荐知乎上的<a href="https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender" target="_blank" rel="external">Immutable 详解及 React 中实践</a>。我们项目里用的是Facebook 工程师 Lee Byron 花费 3 年时间打造的<a href="https://github.com/facebook/immutable-js/" target="_blank" rel="external">immutable.js库</a>。具体的API大家可以去官网学习。</p><p>熟悉 React 的都知道，React 做性能优化时有一个避免重复渲染的大招，就是使用 <code>shouldComponentUpdate()</code>，但它默认返回 <code>true</code>，即始终会执行 <code>render()</code> 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。当然我们也可以在 <code>shouldComponentUpdate()</code> 中使用使用 deepCopy 和 deepCompare 来避免无必要的 <code>render()</code>，但 deepCopy 和 deepCompare 一般都是非常耗性能的。  </p><p>Immutable 则提供了简洁高效的判断数据是否变化的方法，只需 <code>===</code>(地址比较) 和 <code>is</code>( 值比较) 比较就能知道是否需要执行 <code>render()</code>，而这个操作几乎 0 成本，所以可以极大提高性能。修改后的 <code>shouldComponentUpdate</code> 是这样的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; is &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line">shouldComponentUpdate: <span class="function">(<span class="params">nextProps = &#123;&#125;, nextState = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> thisProps = <span class="keyword">this</span>.props || &#123;&#125;, thisState = <span class="keyword">this</span>.state || &#123;&#125;;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(thisProps).length !== <span class="built_in">Object</span>.keys(nextProps).length ||</div><div class="line">      <span class="built_in">Object</span>.keys(thisState).length !== <span class="built_in">Object</span>.keys(nextState).length) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextProps) &#123;</div><div class="line">    <span class="keyword">if</span> (thisProps[key] !== nextProps[key] || ！is(thisProps[key], nextProps[key])) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextState) &#123;</div><div class="line">    <span class="keyword">if</span> (thisState[key] !== nextState[key] || ！is(thisState[key], nextState[key])) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分：</p><p><img src="/assets/img/immutable.jpg" alt="immutable演示" title="immutable演示">  </p><p>本项目中，我们采用支持 class 语法的 <a href="http://link.zhihu.com/?target=https%3A//github.com/felixgirault/pure-render-decorator" target="_blank" rel="external">pure-render-decorator</a> 来实现。我们希望达到的效果是：当我们编辑组件的属性时，其他组件并不被渲染，而且preview里，只有被修改的preview组件update，而其他preview组件不渲染。为了方便观察组件是否被渲染，我们人为的给组件增加了data-id的属性，其值为<code>Math.random()</code>的随机值。效果如下图所示：  </p><p><img src="/assets/img/immutable.gif" alt="immutable实际效果图" title="immutable实际效果图">  </p><h3 id="4-Reducer"><a href="#4-Reducer" class="headerlink" title="4. Reducer"></a>4. Reducer</h3><p>Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> immutable <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> unitsConfig = immutable.fromJS(&#123;</div><div class="line">    <span class="attr">META</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'META'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'META信息配置'</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">keywords</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">desc</span>: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">TITLE</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'TITLE'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'标题'</span>,</div><div class="line">        <span class="attr">text</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">url</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">color</span>: <span class="string">'#000'</span>,</div><div class="line">        <span class="attr">fontSize</span>: <span class="string">"middle"</span>,</div><div class="line">        <span class="attr">textAlign</span>: <span class="string">"center"</span>,</div><div class="line">        <span class="attr">padding</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">        <span class="attr">margin</span>: [<span class="number">10</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">IMAGE</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'IMAGE'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'图片'</span>,</div><div class="line">        <span class="attr">address</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">url</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">bgColor</span>: <span class="string">'#fff'</span>,</div><div class="line">        <span class="attr">padding</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">        <span class="attr">margin</span>: [<span class="number">10</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">BUTTON</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'BUTTON'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'按钮'</span>,</div><div class="line">        <span class="attr">address</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">url</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">txt</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">margin</span>: [</div><div class="line">            <span class="number">0</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">30</span></div><div class="line">        ],</div><div class="line">        <span class="attr">buttonStyle</span>: <span class="string">"yellowStyle"</span>,</div><div class="line">        <span class="attr">bigRadius</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">style</span>: <span class="string">'default'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">TEXTBODY</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'TEXTBODY'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'正文'</span>,</div><div class="line">        <span class="attr">text</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">textColor</span>: <span class="string">'#333'</span>,</div><div class="line">        <span class="attr">bgColor</span>: <span class="string">'#fff'</span>,</div><div class="line">        <span class="attr">fontSize</span>: <span class="string">"small"</span>,</div><div class="line">        <span class="attr">textAlign</span>: <span class="string">"center"</span>,</div><div class="line">        <span class="attr">padding</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">        <span class="attr">margin</span>: [<span class="number">0</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">30</span>],</div><div class="line">        <span class="attr">changeLine</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">retract</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">bigLH</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">bigPD</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">noUL</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">borderRadius</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">AUDIO</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'AUDIO'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'音频'</span>,</div><div class="line">        <span class="attr">address</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">size</span>: <span class="string">'middle'</span>,</div><div class="line">        <span class="attr">position</span>: <span class="string">'topRight'</span>,</div><div class="line">        <span class="attr">bgColor</span>: <span class="string">'#9160c3'</span>,</div><div class="line">        <span class="attr">loop</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">auto</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">VIDEO</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'VIDEO'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'视频'</span>,</div><div class="line">        <span class="attr">address</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">loop</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">auto</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">padding</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">CODE</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'CODE'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'JSCSS'</span>,</div><div class="line">        <span class="attr">js</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">css</span>: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">STATISTIC</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'STATISTIC'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'统计'</span>,</div><div class="line">        <span class="attr">id</span>: <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> initialState = immutable.fromJS([</div><div class="line">    &#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'META'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'META信息配置'</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">keywords</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">desc</span>: <span class="string">''</span>,</div><div class="line">        <span class="comment">// 非常重要的属性，表明这次state变化来自哪个组件！</span></div><div class="line">        fromType: <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">]);</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = initialState, action</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> newState, localData, tmp</div><div class="line">    <span class="comment">// 初始化从localstorage取数据</span></div><div class="line">    <span class="keyword">if</span> (state === initialState) &#123;</div><div class="line">        localData = localStorage.getItem(<span class="string">'config'</span>);</div><div class="line">        !!localData &amp;&amp; (state = immutable.fromJS(<span class="built_in">JSON</span>.parse(localData)));</div><div class="line">        <span class="comment">// sessionStorage的初始化</span></div><div class="line">        sessionStorage.setItem(<span class="string">'configs'</span>, <span class="built_in">JSON</span>.stringify([]));</div><div class="line">        sessionStorage.setItem(<span class="string">'index'</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'AddUnit'</span>: &#123;</div><div class="line">            tmp = state.push(unitsConfig.get(action.name));</div><div class="line">            newState = tmp.setIn([<span class="number">0</span>, <span class="string">'fromType'</span>], action.name);</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> <span class="string">'CopyUnit'</span>: &#123;</div><div class="line">            tmp = state.push(state.get(action.id));</div><div class="line">            newState = tmp.setIn([<span class="number">0</span>, <span class="string">'fromType'</span>], state.getIn([action.id, <span class="string">'type'</span>]));</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> <span class="string">'EditUnit'</span>: &#123;</div><div class="line">            tmp = state.setIn([action.id, action.prop], action.value);</div><div class="line">            newState = tmp.setIn([<span class="number">0</span>, <span class="string">'fromType'</span>], state.getIn([action.id, <span class="string">'type'</span>]));</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> <span class="string">'RemoveUnit'</span>: &#123;</div><div class="line">            <span class="keyword">const</span> type = state.getIn([action.id, <span class="string">'type'</span>]);</div><div class="line">            tmp = state.splice(action.id, <span class="number">1</span>);</div><div class="line">            newState = tmp.setIn([<span class="number">0</span>, <span class="string">'fromType'</span>], type);</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> <span class="string">'Clear'</span>: &#123;</div><div class="line">            tmp = initialState;</div><div class="line">            newState = tmp.setIn([<span class="number">0</span>, <span class="string">'fromType'</span>], <span class="string">'ALL'</span>);</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> <span class="string">'Insert'</span>: &#123;</div><div class="line">            tmp = immutable.fromJS(action.data);</div><div class="line">            newState = tmp.setIn([<span class="number">0</span>, <span class="string">'fromType'</span>], <span class="string">'ALL'</span>);</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> <span class="string">'MoveUnit'</span>:&#123;</div><div class="line">            <span class="keyword">const</span> &#123;fid, tid&#125; = action;</div><div class="line">            <span class="keyword">const</span> fitem = state.get(fid);</div><div class="line">            <span class="keyword">if</span> (fitem &amp;&amp; fid != tid) &#123;</div><div class="line">                tmp = state.splice(fid, <span class="number">1</span>).splice(tid, <span class="number">0</span>, fitem);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                tmp = state;</div><div class="line">            &#125;</div><div class="line">            newState = tmp.setIn([<span class="number">0</span>, <span class="string">'fromType'</span>], <span class="string">''</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            newState = state;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 更新localstorage，便于恢复现场</span></div><div class="line">    localStorage.setItem(<span class="string">'config'</span>, <span class="built_in">JSON</span>.stringify(newState.toJS()));</div><div class="line"></div><div class="line">    <span class="comment">// 撤销，恢复操作(仅以组件数量变化为触发点，否则存储数据巨大，也没必要)</span></div><div class="line">    <span class="keyword">let</span> index = <span class="built_in">parseInt</span>(sessionStorage.getItem(<span class="string">'index'</span>));</div><div class="line">    <span class="keyword">let</span> configs = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">'configs'</span>));</div><div class="line">    <span class="keyword">if</span>(action.type == <span class="string">'Insert'</span> &amp;&amp; action.index)&#123;</div><div class="line">        sessionStorage.setItem(<span class="string">'index'</span>, index + action.index);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span>(newState.toJS().length != state.toJS().length)&#123;</div><div class="line">            <span class="comment">// 组件的数量有变化，删除历史记录index指针状态之后的所有configs，将这次变化的config作为最新的记录</span></div><div class="line">            configs.splice(index + <span class="number">1</span>, configs.length - index - <span class="number">1</span>, <span class="built_in">JSON</span>.stringify(newState.toJS()));</div><div class="line">            sessionStorage.setItem(<span class="string">'configs'</span>, <span class="built_in">JSON</span>.stringify(configs));</div><div class="line">            sessionStorage.setItem(<span class="string">'index'</span>, configs.length - <span class="number">1</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">// 组件数量没有变化，index不变。但是要更新存储的config配置</span></div><div class="line">            configs.splice(index, <span class="number">1</span>, <span class="built_in">JSON</span>.stringify(newState.toJS()));</div><div class="line">            sessionStorage.setItem(<span class="string">'configs'</span>, <span class="built_in">JSON</span>.stringify(configs));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// console.log(JSON.parse(sessionStorage.getItem('configs')));</span></div><div class="line">    <span class="keyword">return</span> newState</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer;</div></pre></td></tr></table></figure></p><p>Reducer是一个函数，它接受Action和当前State作为参数，返回一个新的State。unitsConfig是存储着各个组件初始配置的对象集合，所有新添加的组件都从里边取初始值。State有一个初始值：initialState，包含META组件，因为每个web页面必定有一个META信息，而且只有一个，所以页面左侧组件列表里不包含它。</p><p>reducer会根据action的type不同，去执行相应的操作。但是一定要注意，immutable数据操作后要记得赋值。每次结束后我们都会去修改fromType值，是因为有的组件，比如AUDIO、CODE等修改后，预览的js代码需要重新执行一次才可以生效，而其他组件我们可以不用去执行，提高性能。  </p><p>当然，我们页面也做了现场恢复功能(localStorage)，也得益于immutable数据结构，我们实现了Redo/Undo的功能。Redo/Undo的功能仅会在组件个数有变化的时候计作一次版本，否则录取的的信息太多，会对性能造成影响。当然，组件信息发生变化我们是会去更新数组的。</p><h3 id="5-工作流程"><a href="#5-工作流程" class="headerlink" title="5. 工作流程"></a>5. 工作流程</h3><p>如下图所示：<br><img src="/assets/img/redux_flow.jpg" alt="redux流程图" title="redux流程图">  </p><p>用户能接触到的只有view层，就是组件里的各种输入框，单选多选等。用户与之发生交互，会发出action。React-Redux提供connect方法，用于从UI组件生成容器组件。connect方法接受两个参数：mapStateToProps和mapDispatchToProps，按照React-Redux的API，我们需要将Store.dispatch(action)写在mapDispatchToProps函数里边，但是为了书写方便和直观看出这个action是哪里发出的，我们没有遵循这个API，而是直接写在在代码中。</p><p>然后，Store 自动调用 Reducer，并且传入两个参数：当前 State 和收到的 Action。 Reducer 会返回新的 State 。State 一旦有变化，Store 就会调用监听函数。在React-Redux规则里，我们需要提供mapStateToProps函数，建立一个从（外部的）state对象到（UI组件的）props对象的映射关系。mapStateToProps会订阅 Store，每当state更新的时候，就会自动执行，重新计算 UI 组件的参数，从而触发UI组件的重新渲染。大家可以看我们content.js组件的最后代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</div><div class="line">    <span class="function"><span class="params">state</span> =&gt;</span> (&#123;</div><div class="line">        <span class="attr">unit</span>: state.get(<span class="string">'unit'</span>),</div><div class="line">    &#125;)</div><div class="line">)(Content);</div></pre></td></tr></table></figure></p><p>connect方法可以省略mapStateToProps参数，那样的话，UI组件就不会订阅Store，就是说 Store 的更新不会引起 UI 组件的更新。像header和footer组件，就是纯UI组件。</p><p>为什么我们的各个子组件都可以拿到state状态，那是因为我们在最顶层组件外面又包了一层<provider> 组件。入口文件index.js代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"babel-polyfill"</span>;</div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Router, Route, IndexRoute, browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">'./index.scss'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Store <span class="keyword">from</span> <span class="string">'./store'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/app'</span>;</div><div class="line"></div><div class="line">ReactDom.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;Store&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;browserHistory&#125;</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;App&#125;</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#app'</span>)</div><div class="line">);</div></pre></td></tr></table></figure></provider></p><p>我们的react-router采用的是browserHistory，使用的是HTML5的History API，路由切换交给后台。</p><h2 id="五、兼容性和打包优化"><a href="#五、兼容性和打包优化" class="headerlink" title="五、兼容性和打包优化"></a>五、兼容性和打包优化</h2><h3 id="1-兼容性"><a href="#1-兼容性" class="headerlink" title="1. 兼容性"></a>1. 兼容性</h3><p>为了让页面更好的兼容IE9+和android浏览器，因为项目使用了babel，所以采用<a href="https://babeljs.io/docs/usage/polyfill/" target="_blank" rel="external">babel-polyfill</a>和<a href="https://babeljs.io/docs/plugins/transform-runtime/" target="_blank" rel="external">babel-plugin-transform-runtime</a>插件。</p><h3 id="2-Antd按需加载"><a href="#2-Antd按需加载" class="headerlink" title="2. Antd按需加载"></a>2. Antd按需加载</h3><p>Antd完整包特别大，有10M多。而我们项目里主要是采用了弹窗组件，所以我们应该采用按需加载。只需在.babelrc文件里配置一下即可，详见<a href="https://ant.design/docs/react/introduce-cn#%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD" target="_blank" rel="external">官方说明</a>。  </p><h3 id="3-webpack配置externals属性"><a href="#3-webpack配置externals属性" class="headerlink" title="3. webpack配置externals属性"></a>3. webpack配置externals属性</h3><p>项目最后打包的main.js非常大，有接近10M多。在网上搜了很多方法，最后发现webpack配置externals属性的方法非常好。可以利用pc的多文件并行下载，降低自己服务器的压力和流量，同时可以利用cdn的缓存资源。配置如下所示：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">externals: &#123;</div><div class="line">    <span class="string">"jquery"</span>: <span class="string">"jQuery"</span>,</div><div class="line">    <span class="string">"react"</span>: <span class="string">"React"</span>,</div><div class="line">    <span class="string">"react-dom"</span>: <span class="string">"ReactDOM"</span>,</div><div class="line">    <span class="string">'CodeMirror'</span>: <span class="string">'CodeMirror'</span>,</div><div class="line">    <span class="string">'immutable'</span>: <span class="string">'Immutable'</span>,</div><div class="line">    <span class="string">'react-router'</span>: <span class="string">'ReactRouter'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>externals属性告诉webpack，如下的这些资源不进行打包，从外部引入。一般都是一些公共文件，比如jquery、react等。注意，因为这些文件从外部引入，所以在<code>npm install</code>的时候，有些依赖这些公共文件的包安装会报warning，所以看到这些大家不要紧张。经过处理，main.js文件大小降到3.7M，然后nginx配置下gzip编码压缩，最终将文件大小降到872KB。因为在移动端，文件加载还是比较慢的，我又给页面加了loading效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pagemaker是一个前端页面制作工具，方便产品，运营和视觉的同学迅速开发简单的前端页面，从而可以解放前端同学的工作量。此项目创意来自网易乐得内部项目&lt;a href=&quot;http://nfop.ms.netease.com/&quot;&gt;nfop&lt;/a&gt;中的pagemaker项目。原来项目的前端是采用jquery和模板ejs做的，每次组件的更新都会重绘整个dom，性能不是很好。因为当时react特别火，加上项目本身的适合，最后决定采用react来试试水。因为原来整个项目是包含很多子项目一起，所以后台的实现也没有参考，完全重写。  &lt;/p&gt;
&lt;p&gt;本项目只是原来项目的简单实现，去除了用的不多和复杂的组件。但麻雀虽小五脏俱全，本项目采用了react的一整套技术栈，适合那些对react有过前期学习，想通过demo来加深理解并动手实践的同学。建议学习本demo的之前，先学习/复习下相关的知识点：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html&quot;&gt;React 技术栈系列教程&lt;/a&gt;、&lt;a href=&quot;https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender&quot;&gt;Immutable 详解及 React 中实践&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;欢迎大家star学习交流：&lt;a href=&quot;https://pagemaker.wty90.com/&quot;&gt;线上地址&lt;/a&gt;&amp;emsp;&lt;a href=&quot;https://github.com/tywei90/pagemaker_production&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="页面制作" scheme="https://www.wty90.com/tags/%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/"/>
    
      <category term="react" scheme="https://www.wty90.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>移动端布局方案探究</title>
    <link href="https://www.wty90.com/2017/07/17/mobile-study/"/>
    <id>https://www.wty90.com/2017/07/17/mobile-study/</id>
    <published>2017-07-17T15:04:58.000Z</published>
    <updated>2018-01-25T08:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>初入移动端，照着淘宝，天猫和网易彩票163的wap主页学习做的demo，主要是排版<br><em>注意：代码运行是file协议，在chrome里不支持引用本地文件，会提示跨域错误，可以用firefox或者Safari打开</em></p><p>当时做的ppt下载: <a href="https://raw.githubusercontent.com/tywei90/mobile_study/master/assets/mobile_study.ppt" target="_blank" rel="external">2015年12月移动端布局方案探究</a></p><p>欢迎大家star学习交流：<a href="https://github.com/tywei90/mobile_study" target="_blank" rel="external">github地址</a></p><a id="more"></a><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h3 id="1-物理像素-physical-pixel"><a href="#1-物理像素-physical-pixel" class="headerlink" title="1. 物理像素(physical pixel)"></a>1. 物理像素(physical pixel)</h3><p>一个物理像素是显示器(手机屏幕)上最小的物理显示单元</p><h3 id="2-设备独立像素-density-independent-pixel"><a href="#2-设备独立像素-density-independent-pixel" class="headerlink" title="2. 设备独立像素(density-independent pixel)"></a>2. 设备独立像素(density-independent pixel)</h3><p>设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: CSS像素)</p><h3 id="3-位图像素"><a href="#3-位图像素" class="headerlink" title="3. 位图像素"></a>3. 位图像素</h3><p>一个位图像素是栅格图像(如：png, jpg, gif等)最小的数据单元。每一个位图像素都包含着一些自身的显示信息(如：显示位置，颜色值，透明度等)</p><h3 id="4-设备像素比-简称dpr"><a href="#4-设备像素比-简称dpr" class="headerlink" title="4. 设备像素比(简称dpr)"></a>4. 设备像素比(简称dpr)</h3><p>设备像素比 = 物理像素 / 设备独立像素（在某一方向上，x方向或者y方向）</p><h3 id="5-scale"><a href="#5-scale" class="headerlink" title="5. scale"></a>5. scale</h3><p>缩放比：scale = 1/dpr</p><h3 id="6-完美视口"><a href="#6-完美视口" class="headerlink" title="6. 完美视口"></a>6. 完美视口</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1,width=device-width,user-scalable=0,maximum-scale=1"</span> /&gt;</span></div></pre></td></tr></table></figure><h2 id="二、网易彩票设计方案"><a href="#二、网易彩票设计方案" class="headerlink" title="二、网易彩票设计方案"></a>二、网易彩票设计方案</h2><p><a href="http://caipiao.163.com/t/" target="_blank" rel="external">网易彩票</a></p><ul><li>采用scale = 1.0写死viewport</li><li>采用媒体查询来确定html根元素的font-size值，即rem值</li><li>rem + 百分比布局</li></ul><p>媒体查询的css代码如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//网易彩票的响应式布局是采用媒体查询来改变rem值实现的</span></div><div class="line"><span class="comment">//媒体查询css</span></div><div class="line"><span class="selector-id">#media-query</span>&#123;</div><div class="line">    <span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">240px</span>) &#123;</div><div class="line">        <span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span> &#123;</div><div class="line">            <span class="attribute">font-size</span>:<span class="number">9px</span><span class="meta">!important</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">320px</span>) &#123;</div><div class="line">        <span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span> &#123;</div><div class="line">            <span class="attribute">font-size</span>:<span class="number">12px</span><span class="meta">!important</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">374px</span>) &#123;</div><div class="line">        <span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span> &#123;</div><div class="line">            <span class="attribute">font-size</span>:<span class="number">14px</span><span class="meta">!important</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">400px</span>) &#123;</div><div class="line">        <span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span> &#123;</div><div class="line">            <span class="attribute">font-size</span>:<span class="number">15px</span><span class="meta">!important</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 省略</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="三、天猫设计方案"><a href="#三、天猫设计方案" class="headerlink" title="三、天猫设计方案"></a>三、天猫设计方案</h2><p><a href="https://www.tmall.com/#/main" target="_blank" rel="external">天猫首页</a></p><ul><li>采用scale = 1.0写死viewport</li><li>不采用rem，body的font-size=14px写死</li><li>px + flexbox布局</li></ul><h2 id="四、遇到的问题"><a href="#四、遇到的问题" class="headerlink" title="四、遇到的问题"></a>四、遇到的问题</h2><h3 id="1-高清屏下（-dpr-gt-1-）1px线模糊问题"><a href="#1-高清屏下（-dpr-gt-1-）1px线模糊问题" class="headerlink" title="1. 高清屏下（ dpr&gt;1 ）1px线模糊问题"></a>1. 高清屏下（ dpr&gt;1 ）1px线模糊问题</h3><p>大多数情况下，设计师产出各种尺寸的稿子，都是先画出大尺寸（一般2x）的稿子，再去缩小尺寸，最后导出。 这样会带来问题：如果设计师在2倍稿子里画了一条1px的线（例如border：1px），这时候假如我们要在scale=1.0里呈现的话，就会变成0.5px，而很大一部分手机是无法画出0.5px的。<br>理论上，1个位图像素对应于1个物理像素，图片才能得到完美清晰的展示。在普通屏幕下是没有问题的，但是在retina屏幕（dpr=2）下就会出现位图像素点不够，从而导致图片模糊的情况。</p><p><img src="/assets/img/h_dpr1.jpg" alt=""></p><hr><h3 id="2-高清屏下（-dpr-gt-1-）高清图片模糊问题"><a href="#2-高清屏下（-dpr-gt-1-）高清图片模糊问题" class="headerlink" title="2. 高清屏下（ dpr&gt;1 ）高清图片模糊问题"></a>2. 高清屏下（ dpr&gt;1 ）高清图片模糊问题</h3><p>对于dpr=2的retina屏幕而言，1个位图像素对应于4个物理像素，由于单个位图像素不可以再进一步分割，所以只能就近取色，从而导致图片模糊(注意上述的几个颜色值)。所以，对于图片高清问题，比较好的方案就是采用两倍图片。如：200×300(css pixel)img标签，就需要提供400×600的图片。<br>对于dpr=2的retina屏幕而言，1个位图像素对应于4个物理像素，由于单个位图像素不可以再进一步分割，所以只能就近取色，从而导致图片模糊(注意上述的几个颜色值)。所以，对于图片高清问题，比较好的方案就是采用两倍图片。如：200×300(css pixel)img标签，就需要提供400×600的图片。</p><p><img src="/assets/img/h_dpr2.jpg" alt=""></p><h2 id="五、终极解决方案–-gt-淘宝设计方案"><a href="#五、终极解决方案–-gt-淘宝设计方案" class="headerlink" title="五、终极解决方案–&gt;淘宝设计方案"></a>五、终极解决方案–&gt;淘宝设计方案</h2><p><a href="https://m.taobao.com/" target="_blank" rel="external">淘宝首页</a></p><ul><li>通过js处理获取手机dpr参数，然后动态生成viewpoint</li><li>获取手机物理像素宽度，分成10份，每一份的宽度即是rem的尺寸。</li><li>根据设计稿的尺寸（px）分三种情况进行处理，采用px + rem布局</li></ul><p>相关的脚本如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> dpr, rem, scale;</div><div class="line">    <span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement;</div><div class="line">    <span class="keyword">var</span> fontEl = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</div><div class="line">    <span class="keyword">var</span> metaEl = <span class="built_in">document</span>.querySelector(<span class="string">'meta[name="viewport"]'</span>);</div><div class="line">    <span class="keyword">var</span> view1 = <span class="built_in">document</span>.querySelector(<span class="string">'#view-1'</span>);</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.screen.width &lt; <span class="number">540</span>)&#123;</div><div class="line">        dpr = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span>;</div><div class="line">        scale = <span class="number">1</span> / dpr;</div><div class="line">        rem = docEl.clientWidth * dpr / <span class="number">10</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        dpr = <span class="number">1</span>;</div><div class="line">        scale =<span class="number">1</span>;</div><div class="line">        rem = <span class="number">54</span>;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//貌似最新的淘宝网站又去掉了，只是限制了主体内容的宽度</span></div><div class="line"></div><div class="line">    <span class="comment">// 设置viewport，进行缩放，达到高清效果</span></div><div class="line">    metaEl.setAttribute(<span class="string">'content'</span>, <span class="string">'width='</span> + dpr * docEl.clientWidth + <span class="string">',initial-scale='</span> + scale + <span class="string">',maximum-scale='</span> + scale + <span class="string">', minimum-scale='</span> + scale + <span class="string">',user-scalable=no'</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 设置整体div的宽高</span></div><div class="line">    view1.setAttribute(<span class="string">'style'</span>, <span class="string">'width:'</span>+ docEl.clientWidth+<span class="string">'px; height:'</span>+ docEl.clientHeight+<span class="string">'px'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 设置data-dpr属性，留作的css hack之用</span></div><div class="line">    docEl.setAttribute(<span class="string">'data-dpr'</span>, dpr);</div><div class="line"></div><div class="line">    <span class="comment">// 动态写入样式</span></div><div class="line">    docEl.firstElementChild.appendChild(fontEl);</div><div class="line">    fontEl.innerHTML = <span class="string">'html&#123;font-size:'</span> + rem + <span class="string">'px!important;&#125;'</span>;</div><div class="line">    $(<span class="string">'body'</span>).attr(<span class="string">'style'</span>, <span class="string">'font-size:'</span> + dpr * <span class="number">12</span> +<span class="string">'px'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 给js调用的，某一dpr下rem和px之间的转换函数</span></div><div class="line">    <span class="built_in">window</span>.rem2px = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">        v = <span class="built_in">parseFloat</span>(v);</div><div class="line">        <span class="keyword">return</span> v * rem;</div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">window</span>.px2rem = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">        v = <span class="built_in">parseFloat</span>(v);</div><div class="line">        <span class="keyword">return</span> v / rem;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">window</span>.dpr = dpr;</div><div class="line">    <span class="built_in">window</span>.rem = rem;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h2 id="六、设计方案总结"><a href="#六、设计方案总结" class="headerlink" title="六、设计方案总结"></a>六、设计方案总结</h2><p>从以上的分析我们不难看出：</p><ul><li>网易彩票的方案上手快，开发效率高，兼容性好，但是不够灵活和精细；</li><li>天猫的设计思路比较简单，flexbox非常灵活，但是flexbox的兼容性方面需要好好处理，不够精细；</li><li>淘宝的方案几乎解决了移动端遇到的所有问题，堪称完美的解决方案，但是开发效率低、成本比较高。</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="http://www.cnblogs.com/2050/p/3877280.html" target="_blank" rel="external">移动前端开发之viewport的深入理解</a></li><li><a href="http://www.html-js.com/article/Mobile-terminal-H5-mobile-terminal-HD-multi-screen-adaptation-scheme%203041" target="_blank" rel="external">【原创】移动端高清、多屏适配方案</a></li><li><a href="http://my.oschina.net/kenblog/blog/373341?fromerr=OQeOo5fR" target="_blank" rel="external">wap手机端页面根据dpr和宽度计算出font-size对应数值</a></li><li><a href="http://www.1024i.com/demo/less/document.html" target="_blank" rel="external">less语法</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初入移动端，照着淘宝，天猫和网易彩票163的wap主页学习做的demo，主要是排版&lt;br&gt;&lt;em&gt;注意：代码运行是file协议，在chrome里不支持引用本地文件，会提示跨域错误，可以用firefox或者Safari打开&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当时做的ppt下载: &lt;a href=&quot;https://raw.githubusercontent.com/tywei90/mobile_study/master/assets/mobile_study.ppt&quot;&gt;2015年12月移动端布局方案探究&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎大家star学习交流：&lt;a href=&quot;https://github.com/tywei90/mobile_study&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动端布局" scheme="https://www.wty90.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/"/>
    
      <category term="css" scheme="https://www.wty90.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>数组多重筛选条件排序方法，外加一些简单常用的数组方法</title>
    <link href="https://www.wty90.com/2016/11/28/multi-sort-array/"/>
    <id>https://www.wty90.com/2016/11/28/multi-sort-array/</id>
    <published>2016-11-27T16:07:48.000Z</published>
    <updated>2018-01-25T08:10:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、问题背景"><a href="#一、问题背景" class="headerlink" title="一、问题背景"></a>一、问题背景</h2><p>前端时间做项目遇到个数组多重筛选条件排序的问题，做的是一个展示用户拥有的红包和加息券页面，但是排序类似于下面这样：</p><ol><li>先按照截止时间倒序排；</li><li>若截止时间一样，则按照获得时间倒序排；</li><li>若获得时间一样时，红包&gt;加息券；</li><li>剩余则随机。</li></ol><p>欢迎大家star学习交流：<a href="https://github.com/tywei90/selfwork/tree/master/sortArr" target="_blank" rel="external">github地址</a><br><a id="more"></a></p><h2 id="二、解决方法1"><a href="#二、解决方法1" class="headerlink" title="二、解决方法1"></a>二、解决方法1</h2><p>我就琢磨着，这个可以做成一个组件。但是实现的方法其实也就是算法有好多种，我当时最先想到的是数组的自带排序方法sort,在参数function里边去处理排序，确实是可以做到先按照截止时间排序，并且可以提取出截止时间相同的元素组成的数组，但是再这样递归下去直到最后一个条件，然后再归纳数组合并，数据不太好处理，也不容易做成函数的递归。我捉摸着写出了下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortDeepArr</span>(<span class="params">arr, sortTypes</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> len = sortTypes.length;</div><div class="line">    <span class="keyword">var</span> arrObj = &#123;&#125;; <span class="comment">//对象--&gt;对象--&gt;数组--&gt;对象</span></div><div class="line">    sortArr(arr, sortTypes[i]);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sortArr</span>(<span class="params">arr, sortType</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> itSelf = <span class="built_in">arguments</span>.callee;</div><div class="line">        arrObj[sortType.name] = &#123;&#125;;</div><div class="line">        arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">item1, item2</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (item1[sortType.name] === item2[sortType.name]) &#123;</div><div class="line">                <span class="keyword">if</span> (!arrObj[sortType.name][item1[sortType.name]]) &#123;</div><div class="line">                    arrObj[sortType.name][item1[sortType.name]] = [item1, item2]</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    arrObj[sortType.name][item1[sortType.name]].push(item2)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// console.log(arrObj)</span></div><div class="line">            <span class="keyword">return</span> (item1[sortType.name] - item2[sortType.name]) * ((sortType.positive || <span class="literal">true</span>) ? <span class="number">1</span> : <span class="number">-1</span>)</div><div class="line">        &#125;);</div><div class="line">        <span class="built_in">console</span>.log(arrObj)</div><div class="line">        i++</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">JSON</span>.stringify(arrObj[sortType.name]) === <span class="string">"&#123;&#125;"</span> || i &gt;= len) &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> nextSortType = sortTypes[i + <span class="number">1</span>];</div><div class="line">            $.each(arrObj[sortType.name], <span class="function"><span class="keyword">function</span>(<span class="params">key, val</span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(i)</div><div class="line">                itSelf(val, nextSortType)</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="三、解决方法2"><a href="#三、解决方法2" class="headerlink" title="三、解决方法2"></a>三、解决方法2</h2><p>不知道你们乱不乱啊，反正我是放弃了。。。既然这个走不通，我就想，我们能不能遍历所有条件一次选出一个或者几个元素，然后再从头遍历。就是说我们先从所有数组中选出截止时间离我们最近，如果只有一个，直接return，此次循环结束；如果有多个，再从中选出获得时间离我们最近的，如果只有一个，直接return，此次循环结束；如果有多个。。。一直到最后条件c后，return所有剩下的。这样第一轮就算结束了，然后我们将第一轮筛选出来的元素push进outArr里边，并从输入数组inArr中删除这些数组。接着再这样递归下去，直到inArr为空数组。</p><p>这样思路是不是清爽多了？也比较好处理递归的问题。废话少说，附上代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sortArrMethods =&#123;</div><div class="line">        <span class="comment">// 删除数组指定项(index)</span></div><div class="line">        delArrByIndex: <span class="function"><span class="keyword">function</span> (<span class="params">arr, indexArr</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> [];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = indexArr.length; i &lt; len; i++) &#123;</div><div class="line">                arr.splice(indexArr[i] - i, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// 选出对象数组某个属性值最大的对象组成的数组</span></div><div class="line">        maxObjArr: <span class="function"><span class="keyword">function</span> (<span class="params">arr, sortType</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> maxData;</div><div class="line">            <span class="keyword">var</span> tmpArr = [];</div><div class="line">            <span class="keyword">var</span> outArr = [];</div><div class="line">            <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> [];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=arr.length; i&lt;len; i++)&#123;</div><div class="line">                tmpArr.push(arr[i][sortType]);</div><div class="line">            &#125;</div><div class="line">            maxData = maxNum(tmpArr);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=arr.length; i&lt;len; i++)&#123;</div><div class="line">                <span class="keyword">if</span> (arr[i][sortType] === maxData) &#123;</div><div class="line">                    outArr.push(arr[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> outArr</div><div class="line">            <span class="comment">// 选出数字组成的数组中最大值</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">maxNum</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="built_in">Math</span>.max.apply(&#123;&#125;, array)</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// 选出对象数组某个属性值最小的对象组成的数组</span></div><div class="line">        minObjArr: <span class="function"><span class="keyword">function</span> (<span class="params">arr, sortType</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> minData;</div><div class="line">            <span class="keyword">var</span> tmpArr = [];</div><div class="line">            <span class="keyword">var</span> outArr = [];</div><div class="line">            <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> [];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=arr.length; i&lt;len; i++)&#123;</div><div class="line">                tmpArr.push(arr[i][sortType]);</div><div class="line">            &#125;</div><div class="line">            minData = minNum(tmpArr);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=arr.length; i&lt;len; i++)&#123;</div><div class="line">                <span class="keyword">if</span> (arr[i][sortType] === minData) &#123;</div><div class="line">                    outArr.push(arr[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> outArr</div><div class="line">            <span class="comment">// 选出数字组成的数组中最小值</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">minNum</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(&#123;&#125;, array)</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// 多重条件数组筛选方法</span></div><div class="line">        multiSortArr: <span class="function"><span class="keyword">function</span>(<span class="params">arr, sortLists</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> me = <span class="keyword">this</span>;</div><div class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">var</span> len = sortLists.length;</div><div class="line">            <span class="keyword">var</span> inArr = arr;</div><div class="line">            <span class="keyword">var</span> outArr = [];</div><div class="line">            <span class="keyword">if</span> (inArr.length === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> [];</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 严格模式下arguments.callee正确的使用姿势</span></div><div class="line">            <span class="keyword">var</span> sortArr = (<span class="function"><span class="keyword">function</span> <span class="title">sortArrWrap</span>(<span class="params">arr, sortList</span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> filterArr = [];</div><div class="line">                    <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (sortList.positive === <span class="literal">false</span>) &#123;</div><div class="line">                        filterArr = me.maxObjArr(arr, sortList.name);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        filterArr = me.minObjArr(arr, sortList.name);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (filterArr.length === <span class="number">1</span> || i &gt;= len - <span class="number">1</span>) &#123;</div><div class="line">                        outArr = outArr.concat(filterArr);</div><div class="line">                        <span class="comment">// 删除原来数组中的对应项</span></div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="number">0</span>,len1=filterArr.length; k&lt;len1; k++)&#123;</div><div class="line">                            <span class="comment">// 每次查找到一个就删除原数组对应项，并更新stringifyInArr，防止有多个相同元素，导致删除错误</span></div><div class="line">                            <span class="keyword">var</span> stringifyInArr = [];</div><div class="line">                            <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>,len2=inArr.length; j&lt;len2; j++)&#123;</div><div class="line">                                stringifyInArr.push(<span class="built_in">JSON</span>.stringify(inArr[j]));</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">var</span> delIndex = stringifyInArr.indexOf(<span class="built_in">JSON</span>.stringify(filterArr[k]));</div><div class="line">                            <span class="keyword">if</span> (delIndex !== <span class="number">-1</span>) &#123;</div><div class="line">                                me.delArrByIndex(inArr, [delIndex]);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        i++;</div><div class="line">                        sortArrWrap(filterArr, sortLists[i])</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                <span class="comment">// 严格模式下arguments.callee正确的使用姿势</span></div><div class="line">            <span class="keyword">var</span> loopSortArr = (<span class="function"><span class="keyword">function</span> <span class="title">loopSortArrWrap</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                i = <span class="number">0</span>;</div><div class="line">                sortArr(inArr, sortLists[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">if</span> (inArr.length === <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span></div><div class="line">                &#125;</div><div class="line">                loopSortArrWrap();</div><div class="line">            &#125;)</div><div class="line">            loopSortArr();</div><div class="line">            <span class="keyword">return</span> outArr;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> sortArrMethods</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>去除了原来用jquery的<code>$.each()</code>方法遍历数组，改用for循环，解除依赖。这样脚本就是纯原生js写的，没有兼容性问题并且不依赖任何组件，大家放心使用。这里是用的AMD异步模块方案做的组件，没有依赖，输出一个对象，有delArrByIndex、maxObjArr、minObjArr和multiSortArr四个数组方法。</p><h2 id="四、详细用法说明及测试"><a href="#四、详细用法说明及测试" class="headerlink" title="四、详细用法说明及测试"></a>四、详细用法说明及测试</h2><blockquote><p>1、多重数组筛选方法：multiSortArr</p></blockquote><p>针对类似如下的情况：</p><pre><code>1. 先按照截止时间倒序排；2. 若截止时间一样，则按照获得时间倒序排；3. 若获得时间一样时，红包&gt;加息券；4. 剩余则随机。</code></pre><h3 id="for-test"><a href="#for-test" class="headerlink" title="for test"></a>for test</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [&#123;</div><div class="line">    <span class="attr">invalidTime</span>: <span class="number">100</span>,</div><div class="line">    <span class="attr">assignTime</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">type</span>: <span class="number">0</span></div><div class="line">&#125;,&#123;</div><div class="line">    <span class="attr">invalidTime</span>: <span class="number">110</span>,</div><div class="line">    <span class="attr">assignTime</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">type</span>: <span class="number">1</span></div><div class="line">&#125;,&#123;</div><div class="line">    <span class="attr">invalidTime</span>: <span class="number">110</span>,</div><div class="line">    <span class="attr">assignTime</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">type</span>: <span class="number">0</span></div><div class="line">&#125;,&#123;</div><div class="line">    <span class="attr">invalidTime</span>: <span class="number">110</span>,</div><div class="line">    <span class="attr">assignTime</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">type</span>: <span class="number">0</span></div><div class="line">&#125;,&#123;</div><div class="line">    <span class="attr">invalidTime</span>: <span class="number">110</span>,</div><div class="line">    <span class="attr">assignTime</span>: <span class="number">14</span>,</div><div class="line">    <span class="attr">type</span>: <span class="number">0</span></div><div class="line">&#125;,&#123;</div><div class="line">    <span class="attr">invalidTime</span>: <span class="number">92</span>,</div><div class="line">    <span class="attr">assignTime</span>: <span class="number">13</span>,</div><div class="line">    <span class="attr">type</span>: <span class="number">0</span></div><div class="line">&#125;,&#123;</div><div class="line">    <span class="attr">invalidTime</span>: <span class="number">92</span>,</div><div class="line">    <span class="attr">assignTime</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">type</span>: <span class="number">1</span></div><div class="line">&#125;,&#123;</div><div class="line">    <span class="attr">invalidTime</span>: <span class="number">92</span>,</div><div class="line">    <span class="attr">assignTime</span>: <span class="number">12</span>,</div><div class="line">    <span class="attr">type</span>: <span class="number">0</span></div><div class="line">&#125;]</div><div class="line"><span class="built_in">console</span>.table(arr)</div><div class="line"><span class="comment">// positive参数为true表示从小到大排序, false从大到小, 默认为true</span></div><div class="line"><span class="keyword">var</span> outArr = sortArr.multiSortArr(arr, [&#123;<span class="attr">name</span>: <span class="string">'invalidTime'</span>, <span class="attr">positive</span>: <span class="literal">true</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'assignTime'</span>, <span class="attr">positive</span>: <span class="literal">false</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'type'</span>&#125;])</div><div class="line"><span class="built_in">console</span>.table(outArr)</div></pre></td></tr></table></figure><blockquote><p>2、删除数组指定项(index)方法：delArrByIndex</p></blockquote><h3 id="for-test-1"><a href="#for-test-1" class="headerlink" title="for test"></a>for test</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">3</span>, <span class="number">2</span>, <span class="number">52</span>, <span class="number">5</span>, <span class="number">67</span>, <span class="number">356</span>, <span class="number">678</span>, <span class="number">234</span>, <span class="number">455</span>];</div><div class="line"><span class="keyword">var</span> outArr = sortArr.delArrByIndex(arr, [<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>]);</div><div class="line"><span class="comment">// outArr = [3, 2, 5, 356, 678, 455];</span></div></pre></td></tr></table></figure><blockquote><p>3、选出对象数组某个属性值最大、最小的对象组成的数组方法：maxObjArr、minObjArr</p></blockquote><h3 id="for-test-2"><a href="#for-test-2" class="headerlink" title="for test"></a>for test</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [&#123;</div><div class="line">    <span class="attr">invalidTime</span>: <span class="number">82</span>,</div><div class="line">    <span class="attr">assignTime</span>: <span class="number">12</span>,</div><div class="line">    <span class="attr">type</span>: <span class="number">0</span></div><div class="line">&#125;,&#123;</div><div class="line">    <span class="attr">invalidTime</span>: <span class="number">110</span>,</div><div class="line">    <span class="attr">assignTime</span>: <span class="number">12</span>,</div><div class="line">    <span class="attr">type</span>: <span class="number">1</span></div><div class="line">&#125;,&#123;</div><div class="line">    <span class="attr">invalidTime</span>: <span class="number">90</span>,</div><div class="line">    <span class="attr">assignTime</span>: <span class="number">16</span>,</div><div class="line">    <span class="attr">type</span>: <span class="number">0</span></div><div class="line">&#125;]</div><div class="line"><span class="keyword">var</span> outArr1 = sortArr.maxObjArr(arr, <span class="string">'invalidTime'</span>);</div><div class="line"><span class="keyword">var</span> outArr2 = sortArr.minObjArr(arr, <span class="string">'assignTime'</span>);</div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="comment">// outArr1 = [&#123;</span></div><div class="line"><span class="comment">//     invalidTime: 110,</span></div><div class="line"><span class="comment">//     assignTime: 10,</span></div><div class="line"><span class="comment">//     type: 1</span></div><div class="line"><span class="comment">// &#125;]</span></div><div class="line"><span class="comment">// outArr2 = [&#123;</span></div><div class="line"><span class="comment">//     invalidTime: 82,</span></div><div class="line"><span class="comment">//     assignTime: 12,</span></div><div class="line"><span class="comment">//     type: 0</span></div><div class="line"><span class="comment">// &#125;,&#123;</span></div><div class="line"><span class="comment">//     invalidTime: 110,</span></div><div class="line"><span class="comment">//     assignTime: 12,</span></div><div class="line"><span class="comment">//     type: 1</span></div><div class="line"><span class="comment">// &#125;]</span></div></pre></td></tr></table></figure><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>对比上面两种算法的实现，我个人觉得第一种，算法效率更高，因为一次原生数组排序方法就排查出所有第一个条件参数不一样的元素，如果此时没有重复的直接就return了。就算有重复的，后面也就是针对这些重复的进行排查，计算量也是比较小的。但是难就难在数据的存储方式，递归的实现以及最后数据的重组上，同时也比较耗内存，因为需要创建很多数组和对象（如果有比较多重复的话）。第二种，思路比较简单，实现起来方便。但是算法效率并不高，因为是相当于<code>n + (n-1) + (n-2) + ... + 1 = 1/2*n(n+1)</code>复杂度，这里就不算n里边还要循环的次数，因为都这个都一样。而第一种看概率，如果没有重复的就直接是1次，重复多了也是比第二种复杂度小。第二种比较耗cpu，因为计算次数多。</p><p>经过测试目前没有发现问题，欢迎大家使用反馈~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、问题背景&quot;&gt;&lt;a href=&quot;#一、问题背景&quot; class=&quot;headerlink&quot; title=&quot;一、问题背景&quot;&gt;&lt;/a&gt;一、问题背景&lt;/h2&gt;&lt;p&gt;前端时间做项目遇到个数组多重筛选条件排序的问题，做的是一个展示用户拥有的红包和加息券页面，但是排序类似于下面这样：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先按照截止时间倒序排；&lt;/li&gt;
&lt;li&gt;若截止时间一样，则按照获得时间倒序排；&lt;/li&gt;
&lt;li&gt;若获得时间一样时，红包&amp;gt;加息券；&lt;/li&gt;
&lt;li&gt;剩余则随机。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;欢迎大家star学习交流：&lt;a href=&quot;https://github.com/tywei90/selfwork/tree/master/sortArr&quot;&gt;github地址&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="数组" scheme="https://www.wty90.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="排序" scheme="https://www.wty90.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>移动端bug总结和一些奇淫技巧</title>
    <link href="https://www.wty90.com/2016/11/27/mobile-css-bugs-md/"/>
    <id>https://www.wty90.com/2016/11/27/mobile-css-bugs-md/</id>
    <published>2016-11-27T15:25:15.000Z</published>
    <updated>2018-01-25T08:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里总结下我平时自己遇到和在网上看到的一些移动端bug，希望对大家有用。</p><h2 id="part1"><a href="#part1" class="headerlink" title="part1"></a>part1</h2><p>1、uc浏览器的flexbox兼容性bug，在父元素上应用flex属性时，直接子元素要<code>display: block</code>，否则没有效果。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//兼容uc的 space-around</span></div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">justify-content</span>: space-around;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">48</span>/<span class="variable">@brem</span>;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">    <span class="selector-tag">span</span>&#123;</div><div class="line">        <span class="attribute">letter-spacing</span>: <span class="number">5</span>/<span class="variable">@brem</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//兼容UC浏览器</span></div><div class="line">    &gt;*&#123;</div><div class="line">        <span class="attribute">display</span>: block;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><a id="more"></a><p>2、android上的uc浏览器父元素<code>display:flex</code>，子元素margin:auto水平垂直居中没效果，加上<code>justify-content</code>和<code>align-items: center</code>即可，在低端android版本上需要再加上<code>text-align: center</code>才能水平居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>wap端水平垂直居中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex; </div><div class="line">    <span class="comment">//防止移动端bug</span></div><div class="line">    <span class="attribute">justify-content</span>: center;</div><div class="line">    <span class="attribute">align-items</span>: center;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">margin</span>: auto;&#125;</div></pre></td></tr></table></figure><p>3、苹果机click事件代理到body，document上会不触发 </p><p>4、pc端垂直居中<br>父元素<code>display: table</code> 并且显示定义高<br>子元素 <code>display: table-cell; vertical-align: middle</code></p><p>5、em是相对于元素自身的font-size计算的，可以在局部应用</p><p>6、ios手机和android上的uc浏览器等在页面滑动时会禁止一切js脚本，保存为一个状态A，滑动结束后才会触发scroll事件，从状态A开始。所以不能使用setTimeout进行倒计时。可以使用new Date计算时间差。</p><p>7、<code>background-size</code>属性在IE9下不支持，背景图片默认是显示图片自身大小的</p><p>8、<code>padding-top/padding-left</code>百分比都是相对元素本身的宽度</p><p>9、对于小图片可以用base64编码节省http请求<br><a href="http://www.cnblogs.com/coco1s/p/4375774.html" target="_blank" rel="external">http://www.cnblogs.com/coco1s/p/4375774.html</a></p><h2 id="part2"><a href="#part2" class="headerlink" title="part2"></a>part2</h2><p>1、最痛恨的是红米手机，ua返回iphone，需要结合platform判断，但是还不准确，导致需要ios和android区别对待的时候就坑了。</p><p>2、是fixed的问题。这个解决办法是尽量不要用，不过ios7及以下才会出现这个问题。某些情况下红米也会有这个问题。（最近刚刚遇到，已经被坑挂了）。</p><p>3、如果你想要使用css3的动画，那么一定要变着方式使用3d gpu加速的方式，不要试着left，height，width这样的元素进行变换了，android4.4以下版本卡死你。</p><p>4、ios全线点击会有300毫秒延迟，使用fastclick解决。这个插件最良心了。</p><p>5、web app像素眼设计会纠结你1px边框问题。解决办法有相应知乎大牛答过。</p><p>6、qq浏览，uc浏览以及ios的浏览器，滚动时不会触发scroll事件，但会触发touchmove。当停止滚动后会出发scroll。</p><p>7、滚动有iscroll插件，但是还是使用原生的比较好。</p><p>8、meta功能要用好，禁止缩放，缩放比例，屏蔽电话号码等功能很实用。（手机回答就不列举了）。</p><p>9、如果想要像手机淘宝那样的各个平台看起来展示效果一致，那么就使用rem来做单位。</p><p>10、-webkit-tap-highlight-color可以取消点击高亮。</p><p>11、localStorage在浏览器开启无痕模式下ios会抛异常，导致js中断。</p><p>12、一些情况下对非可点击元素监听click事件，ios下不会触发，css增加cursor:pointer就搞定了。当然想要干脆静止点击就是not-allowed。</p><p>13、android4.4以下版本，设置圆角属性需要在直接元素上，向父元素设置圆角并且指定overflow:hidden是不会生效的。</p><h2 id="part3"><a href="#part3" class="headerlink" title="part3"></a>part3</h2><p>1、图片大小最好是标注的2倍，这样可以保证在各类机型上的清晰</p><p>2、小图片最好拼合起来做成雪碧图，然后可以在TinyPNG – Compress PNG images while preserving transparency网站上压缩后再Base64嵌入html或css中。移动端要尽可能减少请求。不过太大的图片就不要base64了，性能会下降。一般以10k为界</p><p>3、rem方案相当复杂，存在非常多的兼容问题，以至于阿里这边还专门有一个Flexible库来解决这一系列问题。但是兼容性问题解决后开发会变得非常畅快。</p><p>4、图片比较多的页面务必要做懒加载（也就是滚动到图片的时候才加载）</p><p>5、border-radius不要随便乱用，在很多安卓机型上都会出现锯齿，非常丑</p><p>6、css动画请使用transform，而非直接控制width,height,margin，否则会造成大量的计算，性能堪忧。transfrom会把元素独立出来单独计算的。</p><p>7、如果动画比较多或者面积比较大，想提高性能的话可以用transform3D，就算不设置3d变换也会促使浏览器开启硬件加速</p><p>8、flex布局挺好，但有点兼容性问题，需要同时写好几个带前缀的私有属性才能保证大多数机型的适配。推荐使用autoprefixer，不过要记得自己定制兼容浏览器列表，不然会有很多-ms-,-o-这类的属性，在移动端是没有用的 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里总结下我平时自己遇到和在网上看到的一些移动端bug，希望对大家有用。&lt;/p&gt;
&lt;h2 id=&quot;part1&quot;&gt;&lt;a href=&quot;#part1&quot; class=&quot;headerlink&quot; title=&quot;part1&quot;&gt;&lt;/a&gt;part1&lt;/h2&gt;&lt;p&gt;1、uc浏览器的flexbox兼容性bug，在父元素上应用flex属性时，直接子元素要&lt;code&gt;display: block&lt;/code&gt;，否则没有效果。&lt;br&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//兼容uc的 space-around&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;justify-content&lt;/span&gt;: space-around;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;48&lt;/span&gt;/&lt;span class=&quot;variable&quot;&gt;@brem&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: white;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;span&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;letter-spacing&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;/&lt;span class=&quot;variable&quot;&gt;@brem&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//兼容UC浏览器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;gt;*&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: block;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://www.wty90.com/tags/css/"/>
    
      <category term="移动端" scheme="https://www.wty90.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="兼容性" scheme="https://www.wty90.com/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建系列三：如何使博客支持百度搜索</title>
    <link href="https://www.wty90.com/2016/11/20/support-for-baidu-search/"/>
    <id>https://www.wty90.com/2016/11/20/support-for-baidu-search/</id>
    <published>2016-11-20T15:41:46.000Z</published>
    <updated>2018-01-25T08:11:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们写自己的博客，当然是想被更多的人看到，分享下自己的研究成果。这里，各种搜索引擎起着重要的作用。查网站的seo，大家可以去<a href="http://seo.chinaz.com/" target="_blank" rel="external">站长之家</a>, 输入查询的网址即可。搜索引擎是靠爬虫去爬网站的上的内容，我们的博客是一个静态博客，内容托管在github上。打开终端，输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -A <span class="string">"Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)"</span> https://github.com</div></pre></td></tr></table></figure></p><p>我们会看到结果如下图：</p><p><img src="/assets/img/curl_baidu.png" alt="百度爬虫爬github" title="百度爬虫爬github"><br><a id="more"></a><br>github把百度爬虫屏蔽了，原因就是百度爬虫爬得太厉害，已经对很多Github用户造成了可用性的问题了。当然，大家也可以尝试下百度爬虫能不能爬到自己的网站内容，我想结果是一样的。我们可以再试试谷歌爬虫，输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -A <span class="string">"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"</span> https://github.com</div></pre></td></tr></table></figure></p><p>发现确实可以爬到网页的内容。也就是说，如果用谷歌搜索一些我们博客上的关键字是能搜索到我们文章的，但是百度是搜不到的。国内我们都知道，谷歌被墙了，所以用百度搜索还是有很大比例的。那么我们如何才能使百度搜索到呢？推荐大家一篇技术分析的文章<a href="http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/" target="_blank" rel="external">解决 Github Pages 禁止百度爬虫的方法与可行性分析</a>。</p><p>最好的解决办法还是要将我们博客的内容托管在百度爬虫可以爬的到的地方。最好不需要我们自己购买主机什么的，其实就是一个类似于github的代码托管平台。其实，国内还真有：<a href="https://coding.net/" target="_blank" rel="external">coding.net</a>，将gitcafe收购了，是国内最大的代码托管平台，界面也很清爽简洁。操作的步骤其实和github类似。我们这里就不详述了，大家可以参考这篇文章：<a href="http://bblove.me/2016/03/06/migrate-pages-from-gitcafe-to-coding/" target="_blank" rel="external">解决 Github Pages 禁止百度爬虫的方法2–从gitcafe迁移到coding.net</a>。</p><p>不过注意下，mac的ssh key获取我们在系列文章一中说过；还有dns的设置大家参考我系列文章二中的设置。这里吐槽一下，github做了cname处理绑定域名后，访问原来提供的github.io域名，会提示301永久重定向到我现在的域名。但是coding.me的域名还是可以正常访问的。这个就有点不爽了。一样的内容，多个域名，会造成网站的分流，seo权重下降。但是服务器是人家的，我们也不能不能做什么。不过，我已经在coding的论坛上提了这个问题，人家技术人员说正在开发，说是下周就能出来。</p><p>这样设置好以后，大家可以用上面的命令看能不能爬到。而且，每次用hexo部署后，我们的博客代码会同时部署到github和coding上，非常方便。这里建议大家将自己的博客目录创建一个github仓库，备份一下里边的source文件夹和_config.yml等配置文件。这样一来我们就不必非得用自己的电脑才能写博客；二来可以做博客内容备份。</p><p>至此，博客搭建系列完毕！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们写自己的博客，当然是想被更多的人看到，分享下自己的研究成果。这里，各种搜索引擎起着重要的作用。查网站的seo，大家可以去&lt;a href=&quot;http://seo.chinaz.com/&quot;&gt;站长之家&lt;/a&gt;, 输入查询的网址即可。搜索引擎是靠爬虫去爬网站的上的内容，我们的博客是一个静态博客，内容托管在github上。打开终端，输入以下命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;curl -A &lt;span class=&quot;string&quot;&gt;&quot;Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)&quot;&lt;/span&gt; https://github.com&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们会看到结果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/curl_baidu.png&quot; alt=&quot;百度爬虫爬github&quot; title=&quot;百度爬虫爬github&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://www.wty90.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="seo" scheme="https://www.wty90.com/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建系列二：个人博客绑定自己域名</title>
    <link href="https://www.wty90.com/2016/11/15/blog-bind-domain/"/>
    <id>https://www.wty90.com/2016/11/15/blog-bind-domain/</id>
    <published>2016-11-15T14:47:46.000Z</published>
    <updated>2018-01-16T04:46:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章，我们详细说明了如何用hexo搭建个人博客，并且有了自己的博客地址。但是，有的同学可能觉得还不够牛逼。ok，那下面我分享下自己的博客是如何绑定自己申请的域名。</p><h2 id="1、申请域名"><a href="#1、申请域名" class="headerlink" title="1、申请域名"></a>1、申请域名</h2><p>博客绑定域名，首先，你得有个域名。关于申请域名的网址有很多，国内有万网（被阿里云收购了），新网等。不过我不推荐在国内购买域名，需要备案等一系列手续非常麻烦。</p><p>国外的域名注册商很多，用的比较多的有GoDaddy、namecheap、name.com等，至于选哪个，推荐大家一篇知乎上的文章 <a href="https://www.zhihu.com/question/19551906" target="_blank" rel="external">https://www.zhihu.com/question/19551906</a> 没错，我是在namecheap上注册的，现在貌似没有优惠码了，不过他们家免费送Whois 隐私保护（Whois查询不到注册人），SSL证书不再免费，不过和域名一起购买只需再花2$，总共一年也就70几块钱。<br><a id="more"></a><br>这里推荐大家申请后缀为.com的域名。当然了，如果你喜欢有个性的域名，或者希望网址能短一点，选其他的应该更容易命中。还有点要注意，namecheap不支持支付宝，银联，大家可以选择带有master或者visa标志的银行卡支付。这里再给大家推荐个比价网站 <a href="https://www.domcomp.com/" target="_blank" rel="external">https://www.domcomp.com/</a> 有个网站第一年很便宜，后面续约越来越贵。我想一般我们的域名申请了应该会用挺久的吧。</p><h2 id="2、注册DNSPod，添加域名和记录"><a href="#2、注册DNSPod，添加域名和记录" class="headerlink" title="2、注册DNSPod，添加域名和记录"></a>2、注册<a href="https://www.dnspod.cn" target="_blank" rel="external">DNSPod</a>，添加域名和记录</h2><p>DNS域名解析一般都是用的DNSPod，大家注册以后去域名解析一栏添加自己刚申请的域名。然后设置如下图所示:</p><p><img src="/assets/img/dnspod.png" alt="DNS域名解析设置" title="DNS域名解析设置"></p><p>大家只需要添加红框部分内容即可，其他设置下一篇文章会说。这里我们添加了主机记录分别为www和@两种类型，分别对应着您的网址带www和不带www的映射。防止有的浏览器默认添加www导致网页打不开。</p><p>一定要注意我们的CNAME记录指向值，我看网上很多都是设置的一个ip值，其实这样不好。因为第一，ip地址可能会变。第二，写死ip地址，万一这个主机挂了，或者某地区的这个ip网络信号不好，我们的网页就不打不开。大家可以在命令行dig一下，上一篇文章说过这个命令。</p><p>还有个非常重要没说，就是去你域名注册的网站去绑定DNSPod的dns服务器设置。如果是namecheap网站，替换掉网址 <a href="https://ap.www.namecheap.com/domains/domaincontrolpanel/your_domain_name/domain" target="_blank" rel="external">https://ap.www.namecheap.com/domains/domaincontrolpanel/your_domain_name/domain</a> 中的your_domain_name，添加两条NAMESERVERS记录，设置如下图所示。</p><p><img src="/assets/img/dns.png" alt="绑定DNSPod服务器设置" title="绑定DNSPod服务器设置"></p><p>这样，你的网站才能被DNSPod做dns解析。一般需要一定时间才能生效，我当时是半个小时左右吧。</p><h2 id="3、添加CNAME文件"><a href="#3、添加CNAME文件" class="headerlink" title="3、添加CNAME文件"></a>3、添加CNAME文件</h2><p>在你的博客source文件夹里创建CNAME文件，不带任何后缀，里面添加你的域名信息，如：weitianyao.com（注意前面不添加<code>http://</code>），如下图：</p><p><img src="/assets/img/CNAME.png" alt="添加CNAME文件" title="添加CNAME文件"></p><p>然后就<code>hexo d</code>试试吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章，我们详细说明了如何用hexo搭建个人博客，并且有了自己的博客地址。但是，有的同学可能觉得还不够牛逼。ok，那下面我分享下自己的博客是如何绑定自己申请的域名。&lt;/p&gt;
&lt;h2 id=&quot;1、申请域名&quot;&gt;&lt;a href=&quot;#1、申请域名&quot; class=&quot;headerlink&quot; title=&quot;1、申请域名&quot;&gt;&lt;/a&gt;1、申请域名&lt;/h2&gt;&lt;p&gt;博客绑定域名，首先，你得有个域名。关于申请域名的网址有很多，国内有万网（被阿里云收购了），新网等。不过我不推荐在国内购买域名，需要备案等一系列手续非常麻烦。&lt;/p&gt;
&lt;p&gt;国外的域名注册商很多，用的比较多的有GoDaddy、namecheap、name.com等，至于选哪个，推荐大家一篇知乎上的文章 &lt;a href=&quot;https://www.zhihu.com/question/19551906&quot;&gt;https://www.zhihu.com/question/19551906&lt;/a&gt; 没错，我是在namecheap上注册的，现在貌似没有优惠码了，不过他们家免费送Whois 隐私保护（Whois查询不到注册人），SSL证书不再免费，不过和域名一起购买只需再花2$，总共一年也就70几块钱。&lt;br&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://www.wty90.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="域名" scheme="https://www.wty90.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建系列一：用hexo搭建个人博客</title>
    <link href="https://www.wty90.com/2016/11/12/build-blog-with-hexo/"/>
    <id>https://www.wty90.com/2016/11/12/build-blog-with-hexo/</id>
    <published>2016-11-12T10:04:23.000Z</published>
    <updated>2018-01-16T04:46:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>本来不准备写的，因为网上一搜一大堆讲如何用hexo搭建博客的文章，但是，一来这个markdown语法以前没写过，想用来练练手。二来，网上文章有的写的比较早，一些配置和api可能已经变了。好的，啰嗦玩了，下面开始正文。</p><p>首先声明，本教程是针对mac的，不保证windows执行没有问题</p><h2 id="1、配置环境"><a href="#1、配置环境" class="headerlink" title="1、配置环境"></a>1、配置环境</h2><blockquote><p>安装node</p></blockquote><p>nodejs是服务器语言，借助google的chrome浏览器V8引擎，可以让前端js脚本运行在服务器端，前后端语言统一，不要太美~在这里，他主要是用来生成静态页面的。<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js官网</a>下载相应平台的最新版本，一路安装即可。<br><a id="more"></a></p><blockquote><p>安装git</p></blockquote><p>把本地的hexo内容提交到github上去，安装Xcode就自带有Git。可以用命令行，当然你也可以source tree可视化工具来管理。</p><blockquote><p>申请github账号</p></blockquote><p>hexo博客是一个静态博客，内容是托管在github上的。去官网注册申请，然后配置下SSH Keys，这样就不用每次提交都输入用户名和密码了。<a href="http://blog.csdn.net/yhqbsand/article/details/22763411" target="_blank" rel="external">mac ssh key 获取</a></p><h2 id="2、hexo搭建博客"><a href="#2、hexo搭建博客" class="headerlink" title="2、hexo搭建博客"></a>2、hexo搭建博客</h2><blockquote><p>全局安装hexo</p></blockquote><p>确保上述环境安装好之后，全局安装hexo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g hexo</div></pre></td></tr></table></figure></p><blockquote><p>初始化</p></blockquote><p>创建项目文件夹，如myBlog<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir myBlog</div><div class="line">cd myBlog</div><div class="line">hexo init</div></pre></td></tr></table></figure></p><p>这样，hexo就安装完毕了</p><blockquote><p>生成静态页面</p></blockquote><p>在myBlog文件夹下，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g (或hexo generate)</div></pre></td></tr></table></figure></p><p>这样，hexo就会编译生成静态页面，在public目录下</p><blockquote><p>启动本地服务器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s (或hexo server)</div></pre></td></tr></table></figure><p>在bash命令行，按下command键单击 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> ，即可用浏览器打开此页面。可以做本地预览<br>恭喜！你已经看到自己的博客了。但是域名和服务器都是自己电脑，我们需要关联github，继续往下看</p><h2 id="3、部署github"><a href="#3、部署github" class="headerlink" title="3、部署github"></a>3、部署github</h2><blockquote><p>新建仓库</p></blockquote><p>在github上创建新的仓库，仓库名必须为[your_user_name.github.io]，将自己的github用户名替换掉your_user_name。</p><blockquote><p>编辑文件_config.yml，建立关联</p></blockquote><p>在myBlog根目录找到_config.yml文件，打开它，如果你有sublime编辑器，并安装全局命令。可直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">subl -w _config.yml</div></pre></td></tr></table></figure></p><p>在最下面，改成这样。替换掉your_user_name。一定要注意: 这里的所有配置:后面都要加空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy: </div><div class="line">  type: git</div><div class="line">  repository: https://github.com/your_user_name/your_user_name.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p><blockquote><p>npm安装依赖，才能使用git部署</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure><blockquote><p>将博客部署到github</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d (或hexo deploy)</div></pre></td></tr></table></figure><p>打开网址 <a href="http://tywei90.github.io/" target="_blank" rel="external">http://tywei90.github.io/</a> tywei90是我的github用户名，换成你自己的就行。看到没？你的博客已经上线了~</p><p>等等。。好像哪里不对。如果这样，岂不是每个github用户都有一个自己的域名，github那来的这么多域名？其实你只要在你的bash命令行执行命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dig tywei90.github.io</div></pre></td></tr></table></figure></p><p>我们会看到：<br><img src="/assets/img/dig.jpg" alt="dig结果" title="dig结果"></p><p>dig命令是查网址的dns解析的，我们发现博客地址被CNAME到github.map.fastly.net.上，他的服务器ip是151.101.100.133。什么意思呢，我们先来解释下CNAME。</p><p>CNAME指别名记录也被称为规范名字。这种记录允许您将多个域名需要指向同一服务器IP，此时您就可以将一个域名做A记录指向服务器IP，然后将其他的域名做别名(即CNAME)到A记录的域名上；那么当您的服务器IP地址变更时，您就可以不必对一个一个域名做更改指向了，只需要更改A记录的那个域名到服务器新IP上，其他做别名（即CNAME）的那些域名的指向将自动更改到新的IP地址上。</p><p>总结下：也就是说，我们的博客地址都会被映射到ip为151.101.100.133的主机上，然后github会根据我们的用户名查找相应的静态文件，然后返回。</p><h2 id="4、相关知识"><a href="#4、相关知识" class="headerlink" title="4、相关知识"></a>4、相关知识</h2><blockquote><p>hexo部署三步走</p></blockquote><p>每次部署博客都要执行下面三步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure></p><blockquote><p>hexo常用命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;postName&quot; #新建文章</div><div class="line">hexo new page &quot;pageName&quot; #新建页面</div><div class="line">hexo generate #生成静态页面至public目录</div><div class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class="line">hexo deploy #将.deploy目录部署到GitHub</div><div class="line">hexo help  #查看帮助</div><div class="line">hexo version  #查看Hexo的版本</div></pre></td></tr></table></figure><blockquote><p>hexo主题</p></blockquote><p>hexo有很多漂亮的主题可选，这也是为什么我没有选择jekyll的原因。</p><ul><li><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">Yilia</a> - Responsive and simple style 强烈推荐，我用得就是这个。(ps: 作者人也很nice~)</li><li><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT</a> -Elegant Theme for Hexo 都有自己的官网了，用的人很多</li><li><a href="https://github.com/daisygao/hexo-themes-cover" target="_blank" rel="external">Cover</a> - A chic theme with facebook-like cover photo </li></ul><p>至于主题如何配置，我就不细说了，不同主题不一样，大家可以去参阅相关文档。</p><blockquote><p>博客写作技巧</p></blockquote><p>1、如何让文章想只显示一部分和一个 阅读全文 的按钮？<br>答：在文章中加一个 <code>&lt;!--more--&gt; ， &lt;!--more--&gt;</code> 后面的内容就不会显示出来了。</p><p>2、如何给文章添加标签？<br>答：在文章的开头有个tags配置项，配置格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tags:</div><div class="line">    - hexo</div><div class="line">    - 博客</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来不准备写的，因为网上一搜一大堆讲如何用hexo搭建博客的文章，但是，一来这个markdown语法以前没写过，想用来练练手。二来，网上文章有的写的比较早，一些配置和api可能已经变了。好的，啰嗦玩了，下面开始正文。&lt;/p&gt;
&lt;p&gt;首先声明，本教程是针对mac的，不保证windows执行没有问题&lt;/p&gt;
&lt;h2 id=&quot;1、配置环境&quot;&gt;&lt;a href=&quot;#1、配置环境&quot; class=&quot;headerlink&quot; title=&quot;1、配置环境&quot;&gt;&lt;/a&gt;1、配置环境&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;安装node&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;nodejs是服务器语言，借助google的chrome浏览器V8引擎，可以让前端js脚本运行在服务器端，前后端语言统一，不要太美~在这里，他主要是用来生成静态页面的。&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js官网&lt;/a&gt;下载相应平台的最新版本，一路安装即可。&lt;br&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://www.wty90.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="https://www.wty90.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="https://www.wty90.com/2016/11/06/first-article/"/>
    <id>https://www.wty90.com/2016/11/06/first-article/</id>
    <published>2016-11-06T11:41:20.000Z</published>
    <updated>2018-01-25T08:49:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，这是我的博客，用hexo搭建的，托管在<a href="https://github.com/tywei90/tywei90.github.io" target="_blank" rel="external">github</a>和 <del><a href="https://coding.net/u/tywei/p/tywei/git" target="_blank" rel="external">coding</a>上</del>。coding开始收费了，不然会有5s的广告中间页，很不爽。于是，果断买了阿里云的ECS，搭建自己的网站。<br><a id="more"></a><br>网上有很多可以写个人博客的网站，比如CSDN、博客园、简书等。我之前也在CSDN开通了自己的博客，但是感觉页面样式不太喜欢，简书还算可以的。不过，终究是别人的网站，还是想搞一个属于自己的博客。最好有是可以有自己的域名，这样更专(zhuang)业(bi)。而且要支持百度搜索。这就出现了我后面的一系列关于博客搭建的文章。</p><p>这里会记录我平时遇到的一些技术问题的思考和总结，与大家共勉</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家好，这是我的博客，用hexo搭建的，托管在&lt;a href=&quot;https://github.com/tywei90/tywei90.github.io&quot;&gt;github&lt;/a&gt;和 &lt;del&gt;&lt;a href=&quot;https://coding.net/u/tywei/p/tywei/git&quot;&gt;coding&lt;/a&gt;上&lt;/del&gt;。coding开始收费了，不然会有5s的广告中间页，很不爽。于是，果断买了阿里云的ECS，搭建自己的网站。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://www.wty90.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="hexo" scheme="https://www.wty90.com/tags/hexo/"/>
    
  </entry>
  
</feed>
